# frontend/Dockerfile.frontend
# Dockerfile for the React frontend application.

# Use a multi-stage build for a smaller final image
# Stage 1: Build the React app
FROM node:18-alpine AS build-stage

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to install dependencies
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the React app for production
RUN npm run build

# Stage 2: Serve the built application with a lightweight web server
FROM alpine:latest

WORKDIR /app

# Install Nginx.
# Remove the default Nginx configuration directory to ensure a clean slate for our custom configs.
RUN apk add --no-cache nginx && \
    rm -rf /etc/nginx/conf.d/* && \
    rm -f /etc/nginx/nginx.conf

# Recreate the conf.d directory.
RUN mkdir -p /etc/nginx/conf.d

# Copy the built React app from the build-stage
COPY --from=build-stage /app/build ./html

# IMPORTANT: Copy the new nginx-main.conf to the primary Nginx config location.
COPY nginx-main.conf /etc/nginx/nginx.conf

# Copy your custom server block to the conf.d directory, where it will be included by nginx.conf.
COPY nginx-full.conf /etc/nginx/conf.d/default.conf

# Expose port 80 (Nginx will listen on this port)
EXPOSE 80

# Command to run Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
