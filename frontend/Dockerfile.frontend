# frontend/Dockerfile.frontend
# Dockerfile for the React frontend application.

# Use a multi-stage build for a smaller final image
# Stage 1: Build the React app
FROM node:18-alpine AS build-stage

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to install dependencies
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the React app for production
RUN npm run build

# Stage 2: Serve the built application with a lightweight web server
FROM alpine:latest

WORKDIR /app

# Install Nginx for serving static files
RUN apk add --no-cache nginx

# Copy the built React app from the build-stage
COPY --from=build-stage /app/build ./html

# IMPORTANT: Copy your new, complete nginx-full.conf to the main Nginx config file, OVERWRITING the default one.
# Ensure this path is correct for Alpine Nginx installations
COPY nginx-full.conf /etc/nginx/nginx.conf 
EXPOSE 80 

CMD ["nginx", "-g", "daemon off;"]