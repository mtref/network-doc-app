# frontend/Dockerfile.frontend
# Dockerfile for the React frontend application.
# UPDATED: Corrected COPY paths for Nginx config files to align with the root build context.

<<<<<<< Updated upstream
# Use an official Node.js runtime as a parent image
FROM node:18-alpine
=======
# --- Stage 1: Build the React app ---
# This stage uses a Node.js image to build the static assets.
FROM node:18-alpine AS build-stage
>>>>>>> Stashed changes

WORKDIR /app

<<<<<<< Updated upstream
# Copy package.json and package-lock.json to install dependencies
# This leverages Docker cache if dependencies haven't changed
COPY package*.json ./

# Install dependencies
=======
# Copy package manifests first to leverage Docker cache.
# The context is the project root, so we need to specify the 'frontend' subdirectory.
COPY frontend/package*.json ./
>>>>>>> Stashed changes
RUN npm install

# Copy the rest of the frontend application source code.
COPY frontend/. .

<<<<<<< Updated upstream
# Build the React app for production (optional, could also serve dev build for simplicity)
# If you want to serve a production build, you'd typically use a web server like Nginx
# and uncomment this line, then adjust the CMD.
# RUN npm run build

# Expose the port that the React development server will run on
EXPOSE 3000

# Command to run the React development server (handled by docker-compose)
# CMD ["npm", "start"]
=======
# Build the React app for production. The output will be in /app/build.
RUN npm run build

# --- Stage 2: Serve the built application with Nginx ---
# This stage uses a lightweight Alpine image with Nginx.
FROM alpine:latest

WORKDIR /app

# Install Nginx.
# Remove the default Nginx configuration to ensure a clean slate.
RUN apk add --no-cache nginx && \
    rm -rf /etc/nginx/conf.d/* && \
    rm -f /etc/nginx/nginx.conf

# Recreate the conf.d directory for our custom server block.
RUN mkdir -p /etc/nginx/conf.d

# Copy the built React app from the 'build-stage'.
COPY --from=build-stage /app/build ./html

# CORRECTED: Copy Nginx configuration files from the 'frontend' subdirectory
# within the root build context.
COPY frontend/nginx-main.conf /etc/nginx/nginx.conf
COPY frontend/nginx-full.conf /etc/nginx/conf.d/default.conf

# Expose port 80, which Nginx listens on by default.
EXPOSE 80

# Command to run Nginx in the foreground, keeping the container alive.
CMD ["nginx", "-g", "daemon off;"]
>>>>>>> Stashed changes
