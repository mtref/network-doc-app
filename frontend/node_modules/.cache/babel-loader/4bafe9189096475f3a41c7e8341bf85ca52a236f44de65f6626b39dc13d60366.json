{"ast":null,"code":"var _jsxFileName = \"/app/src/components/SwitchDiagramModal.js\";\n// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes.\n\nimport React from \"react\";\nimport { XCircle, Server, Laptop, Plug, Wifi, WifiOff, Network, Split } from \"lucide-react\"; // Import Split icon for Patch Panels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs\n}) {\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(conn => conn.switch_id === selectedSwitch.id && conn.pc);\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map(conn => {\n    const connectedPc = pcs.find(pc => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      pc: connectedPc,\n      hops: conn.hops,\n      // Array of { patch_panel: {id, name, ...}, patch_panel_port, is_port_up, sequence }\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up\n    };\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900; // Increased width for more space\n  const SVG_HEIGHT = 700; // Increased height\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280; // Radius for placing PC nodes in the outer circle\n  const NODE_SIZE = 50; // Base size for PC/Switch circles\n  const HOP_NODE_SIZE = 30; // Smaller size for hop nodes\n\n  const numPaths = fullConnectionPaths.length;\n  // Angle distribution for PCs around the circle\n  const angleStep = numPaths > 0 ? 2 * Math.PI / numPaths : 0;\n\n  // Function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-800 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Network, {\n            size: 24,\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), \" Network Diagram:\", \" \", selectedSwitch.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\",\n          title: \"Close Diagram\",\n          children: /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative flex-grow flex items-center justify-center p-4 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: `0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`,\n          children: [fullConnectionPaths.map((path, pathIndex) => {\n            const angle = pathIndex * angleStep;\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n            // Define PC and Switch node coordinates\n            const pcNodeCoord = {\n              x: pcX,\n              y: pcY\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            let currentPathNode = pcNodeCoord; // Start from PC\n\n            const pathElements = []; // Store all nodes (PC, PPs, Switch) in this path\n            pathElements.push({\n              type: \"PC\",\n              data: path.pc,\n              coords: pcNodeCoord,\n              status: path.is_switch_port_up // Status of the connection from PC perspective\n            });\n\n            // Add hops to path elements\n            path.hops.forEach((hop, hopIndex) => {\n              const percentage = (hopIndex + 1) / (path.hops.length + 1); // Distribute hops evenly along the main line\n              const hopCoords = getPointOnLine(pcNodeCoord, switchNodeCoord, percentage);\n              pathElements.push({\n                type: \"PP\",\n                data: hop.patch_panel,\n                coords: hopCoords,\n                port_status: hop.is_port_up // Status of this specific hop port\n              });\n            });\n\n            // Add Switch to path elements\n            pathElements.push({\n              type: \"Switch\",\n              data: path.switch,\n              coords: switchNodeCoord,\n              port_status: path.is_switch_port_up // Status of switch port in this connection\n            });\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: pathElements.map((node, i) => {\n                if (i === 0) return null; // Skip first node as it's the start of the first line\n\n                const prevNode = pathElements[i - 1];\n                const strokeColor = node.type === \"Switch\" || prevNode.type === \"PP\" ? path.is_switch_port_up ? \"green\" : \"red\" // Final segment uses connection status\n                : prevNode.type === \"PC\" && path.hops.length === 0 ? path.is_switch_port_up ? \"green\" : \"red\" // Direct PC to Switch\n                : \"gray\"; // Intermediate PP lines\n\n                const strokeDash = prevNode.type === \"PC\" && path.hops.length > 0 || node.type === \"PP\" ? \"5 5\" : \"0\"; // Dashed for PP segments\n\n                return /*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: prevNode.coords.x,\n                  y1: prevNode.coords.y,\n                  x2: node.coords.x,\n                  y2: node.coords.y,\n                  stroke: strokeColor,\n                  strokeWidth: \"2\",\n                  strokeDasharray: strokeDash\n                }, `line-${path.connectionId}-${i}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 23\n                }, this);\n              })\n            }, `full-path-${path.connectionId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"g\", {\n            transform: `translate(${CENTER_X}, ${CENTER_Y})`,\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"0\",\n              cy: \"0\",\n              r: NODE_SIZE / 2,\n              fill: \"#EF4444\",\n              stroke: \"#B91C1C\",\n              strokeWidth: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: \"5\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              fontSize: \"14\",\n              fontWeight: \"bold\",\n              children: \"Switch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: NODE_SIZE / 2 + 15,\n              textAnchor: \"middle\",\n              fill: \"black\",\n              fontSize: \"10\",\n              children: selectedSwitch.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Server, {\n              x: \"-12\",\n              y: \"-30\",\n              size: 24,\n              color: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), fullConnectionPaths.map((path, pathIndex) => {\n            var _path$pc;\n            const angle = pathIndex * angleStep;\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              transform: `translate(${pcX}, ${pcY})`,\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"0\",\n                cy: \"0\",\n                r: NODE_SIZE / 2,\n                fill: \"#6366F1\",\n                stroke: \"#4F46E5\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: \"5\",\n                textAnchor: \"middle\",\n                fill: \"white\",\n                fontSize: \"12\",\n                fontWeight: \"bold\",\n                children: \"PC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: NODE_SIZE / 2 + 15,\n                textAnchor: \"middle\",\n                fill: \"black\",\n                fontSize: \"9\",\n                children: ((_path$pc = path.pc) === null || _path$pc === void 0 ? void 0 : _path$pc.name) || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Laptop, {\n                x: \"-10\",\n                y: \"-25\",\n                size: 20,\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                transform: \"translate(15, -15)\",\n                children: path.is_switch_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                  size: 16,\n                  color: \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                  size: 16,\n                  color: \"red\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 19\n              }, this)]\n            }, `pc-node-${path.pc.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this);\n          }), fullConnectionPaths.map((path, pathIndex) => {\n            const angle = pathIndex * angleStep;\n            const pcNodeCoord = {\n              x: CENTER_X + PC_RADIUS * Math.cos(angle),\n              y: CENTER_Y + PC_RADIUS * Math.sin(angle)\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            const segmentPercentage = 1 / (path.hops.length + 1);\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: path.hops.map((hop, hopIndex) => {\n                var _hop$patch_panel;\n                const prevPoint = getPointOnLine(pcNodeCoord, switchNodeCoord, hopIndex * segmentPercentage);\n                const nextPoint = getPointOnLine(pcNodeCoord, switchNodeCoord, (hopIndex + 1) * segmentPercentage);\n                const hopNodeX = (prevPoint.x + nextPoint.x) / 2;\n                const hopNodeY = (prevPoint.y + nextPoint.y) / 2;\n                return /*#__PURE__*/_jsxDEV(\"g\", {\n                  transform: `translate(${hopNodeX}, ${hopNodeY})`,\n                  children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                    cx: \"0\",\n                    cy: \"0\",\n                    r: HOP_NODE_SIZE / 2,\n                    fill: \"#60A5FA\",\n                    stroke: \"#3B82F6\",\n                    strokeWidth: \"1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: \"0\",\n                    y: \"5\",\n                    textAnchor: \"middle\",\n                    fill: \"white\",\n                    fontSize: \"8\",\n                    fontWeight: \"bold\",\n                    children: \"PP\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: \"0\",\n                    y: HOP_NODE_SIZE / 2 + 8,\n                    textAnchor: \"middle\",\n                    fill: \"black\",\n                    fontSize: \"7\",\n                    children: ((_hop$patch_panel = hop.patch_panel) === null || _hop$patch_panel === void 0 ? void 0 : _hop$patch_panel.name) || `PP ${hop.patch_panel_port}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                    transform: \"translate(10, -10)\",\n                    children: hop.is_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                      size: 10,\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 321,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                      size: 10,\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 25\n                  }, this)]\n                }, `hop-node-${hop.id}-${path.connectionId}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 23\n                }, this);\n              })\n            }, `pp-nodes-${path.connectionId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), numPaths === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"absolute text-xl text-gray-600\",\n          children: \"No PCs found connected to this switch.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Plug, {\n            size: 16,\n            className: \"text-green-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), \" Port Up (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(WifiOff, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), \" Port Down (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Server, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), \" Switch\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Laptop, {\n            size: 16,\n            className: \"text-indigo-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), \" PC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Split, {\n            size: 16,\n            className: \"text-blue-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), \" Patch Panel\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center ml-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"black\",\n              strokeWidth: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line to Switch/PC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"gray\",\n              strokeWidth: \"2\",\n              strokeDasharray: \"5 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line between Hops\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_c = SwitchDiagramModal;\nexport default SwitchDiagramModal;\nvar _c;\n$RefreshReg$(_c, \"SwitchDiagramModal\");","map":{"version":3,"names":["React","XCircle","Server","Laptop","Plug","Wifi","WifiOff","Network","Split","jsxDEV","_jsxDEV","SwitchDiagramModal","isOpen","onClose","selectedSwitch","connections","pcs","relevantConnections","filter","conn","switch_id","id","pc","fullConnectionPaths","map","connectedPc","find","pc_id","connectionId","hops","switch","switch_port","is_switch_port_up","SVG_WIDTH","SVG_HEIGHT","CENTER_X","CENTER_Y","PC_RADIUS","NODE_SIZE","HOP_NODE_SIZE","numPaths","length","angleStep","Math","PI","getPointOnLine","p1","p2","percentage","x","y","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","title","width","height","viewBox","path","pathIndex","angle","pcX","cos","pcY","sin","pcNodeCoord","switchNodeCoord","currentPathNode","pathElements","push","type","data","coords","status","forEach","hop","hopIndex","hopCoords","patch_panel","port_status","is_port_up","node","i","prevNode","strokeColor","strokeDash","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","transform","cx","cy","r","fill","textAnchor","fontSize","fontWeight","color","_path$pc","segmentPercentage","Fragment","_hop$patch_panel","prevPoint","nextPoint","hopNodeX","hopNodeY","patch_panel_port","_c","$RefreshReg$"],"sources":["/app/src/components/SwitchDiagramModal.js"],"sourcesContent":["// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes.\n\nimport React from \"react\";\nimport {\n  XCircle,\n  Server,\n  Laptop,\n  Plug,\n  Wifi,\n  WifiOff,\n  Network,\n  Split,\n} from \"lucide-react\"; // Import Split icon for Patch Panels\n\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs,\n}) {\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(\n    (conn) => conn.switch_id === selectedSwitch.id && conn.pc\n  );\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map((conn) => {\n    const connectedPc = pcs.find((pc) => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      pc: connectedPc,\n      hops: conn.hops, // Array of { patch_panel: {id, name, ...}, patch_panel_port, is_port_up, sequence }\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up,\n    };\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900; // Increased width for more space\n  const SVG_HEIGHT = 700; // Increased height\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280; // Radius for placing PC nodes in the outer circle\n  const NODE_SIZE = 50; // Base size for PC/Switch circles\n  const HOP_NODE_SIZE = 30; // Smaller size for hop nodes\n\n  const numPaths = fullConnectionPaths.length;\n  // Angle distribution for PCs around the circle\n  const angleStep = numPaths > 0 ? (2 * Math.PI) / numPaths : 0;\n\n  // Function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage,\n    };\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\">\n        {/* Modal Header */}\n        <div className=\"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\">\n          <h2 className=\"text-xl font-bold text-gray-800 flex items-center\">\n            <Network size={24} className=\"mr-2\" /> Network Diagram:{\" \"}\n            {selectedSwitch.name}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\"\n            title=\"Close Diagram\"\n          >\n            <XCircle size={24} />\n          </button>\n        </div>\n\n        {/* Diagram Area */}\n        <div className=\"relative flex-grow flex items-center justify-center p-4 bg-gray-50\">\n          <svg\n            width=\"100%\"\n            height=\"100%\"\n            viewBox={`0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`}\n          >\n            {/* Draw connections, including hops */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStep;\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              // Define PC and Switch node coordinates\n              const pcNodeCoord = { x: pcX, y: pcY };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n\n              let currentPathNode = pcNodeCoord; // Start from PC\n\n              const pathElements = []; // Store all nodes (PC, PPs, Switch) in this path\n              pathElements.push({\n                type: \"PC\",\n                data: path.pc,\n                coords: pcNodeCoord,\n                status: path.is_switch_port_up, // Status of the connection from PC perspective\n              });\n\n              // Add hops to path elements\n              path.hops.forEach((hop, hopIndex) => {\n                const percentage = (hopIndex + 1) / (path.hops.length + 1); // Distribute hops evenly along the main line\n                const hopCoords = getPointOnLine(\n                  pcNodeCoord,\n                  switchNodeCoord,\n                  percentage\n                );\n                pathElements.push({\n                  type: \"PP\",\n                  data: hop.patch_panel,\n                  coords: hopCoords,\n                  port_status: hop.is_port_up, // Status of this specific hop port\n                });\n              });\n\n              // Add Switch to path elements\n              pathElements.push({\n                type: \"Switch\",\n                data: path.switch,\n                coords: switchNodeCoord,\n                port_status: path.is_switch_port_up, // Status of switch port in this connection\n              });\n\n              return (\n                <g key={`full-path-${path.connectionId}`}>\n                  {/* Draw lines between all elements in the path */}\n                  {pathElements.map((node, i) => {\n                    if (i === 0) return null; // Skip first node as it's the start of the first line\n\n                    const prevNode = pathElements[i - 1];\n                    const strokeColor =\n                      node.type === \"Switch\" || prevNode.type === \"PP\"\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\" // Final segment uses connection status\n                        : prevNode.type === \"PC\" && path.hops.length === 0\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\" // Direct PC to Switch\n                        : \"gray\"; // Intermediate PP lines\n\n                    const strokeDash =\n                      (prevNode.type === \"PC\" && path.hops.length > 0) ||\n                      node.type === \"PP\"\n                        ? \"5 5\"\n                        : \"0\"; // Dashed for PP segments\n\n                    return (\n                      <line\n                        key={`line-${path.connectionId}-${i}`}\n                        x1={prevNode.coords.x}\n                        y1={prevNode.coords.y}\n                        x2={node.coords.x}\n                        y2={node.coords.y}\n                        stroke={strokeColor}\n                        strokeWidth=\"2\"\n                        strokeDasharray={strokeDash}\n                      />\n                    );\n                  })}\n                </g>\n              );\n            })}\n\n            {/* Central Switch Node */}\n            <g transform={`translate(${CENTER_X}, ${CENTER_Y})`}>\n              <circle\n                cx=\"0\"\n                cy=\"0\"\n                r={NODE_SIZE / 2}\n                fill=\"#EF4444\"\n                stroke=\"#B91C1C\"\n                strokeWidth=\"3\"\n              />\n              <text\n                x=\"0\"\n                y=\"5\"\n                textAnchor=\"middle\"\n                fill=\"white\"\n                fontSize=\"14\"\n                fontWeight=\"bold\"\n              >\n                Switch\n              </text>\n              <text\n                x=\"0\"\n                y={NODE_SIZE / 2 + 15}\n                textAnchor=\"middle\"\n                fill=\"black\"\n                fontSize=\"10\"\n              >\n                {selectedSwitch.name}\n              </text>\n              <Server x=\"-12\" y=\"-30\" size={24} color=\"white\" />\n            </g>\n\n            {/* Connected PC Nodes */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStep;\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              return (\n                <g\n                  key={`pc-node-${path.pc.id}`}\n                  transform={`translate(${pcX}, ${pcY})`}\n                >\n                  <circle\n                    cx=\"0\"\n                    cy=\"0\"\n                    r={NODE_SIZE / 2}\n                    fill=\"#6366F1\"\n                    stroke=\"#4F46E5\"\n                    strokeWidth=\"2\"\n                  />\n                  <text\n                    x=\"0\"\n                    y=\"5\"\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                  >\n                    PC\n                  </text>\n                  <text\n                    x=\"0\"\n                    y={NODE_SIZE / 2 + 15}\n                    textAnchor=\"middle\"\n                    fill=\"black\"\n                    fontSize=\"9\"\n                  >\n                    {path.pc?.name || \"N/A\"}\n                  </text>\n                  <Laptop x=\"-10\" y=\"-25\" size={20} color=\"white\" />\n                  {/* Status of PC's connection to Switch (overall path status) */}\n                  <g transform=\"translate(15, -15)\">\n                    {path.is_switch_port_up ? (\n                      <Wifi size={16} color=\"green\" />\n                    ) : (\n                      <WifiOff size={16} color=\"red\" />\n                    )}\n                  </g>\n                </g>\n              );\n            })}\n\n            {/* Patch Panel Nodes (rendered separately to ensure they are on top of their lines) */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStep;\n              const pcNodeCoord = {\n                x: CENTER_X + PC_RADIUS * Math.cos(angle),\n                y: CENTER_Y + PC_RADIUS * Math.sin(angle),\n              };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n              const segmentPercentage = 1 / (path.hops.length + 1);\n\n              return (\n                <React.Fragment key={`pp-nodes-${path.connectionId}`}>\n                  {path.hops.map((hop, hopIndex) => {\n                    const prevPoint = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      hopIndex * segmentPercentage\n                    );\n                    const nextPoint = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      (hopIndex + 1) * segmentPercentage\n                    );\n                    const hopNodeX = (prevPoint.x + nextPoint.x) / 2;\n                    const hopNodeY = (prevPoint.y + nextPoint.y) / 2;\n\n                    return (\n                      <g\n                        key={`hop-node-${hop.id}-${path.connectionId}`}\n                        transform={`translate(${hopNodeX}, ${hopNodeY})`}\n                      >\n                        <circle\n                          cx=\"0\"\n                          cy=\"0\"\n                          r={HOP_NODE_SIZE / 2}\n                          fill=\"#60A5FA\"\n                          stroke=\"#3B82F6\"\n                          strokeWidth=\"1\"\n                        />\n                        <text\n                          x=\"0\"\n                          y=\"5\"\n                          textAnchor=\"middle\"\n                          fill=\"white\"\n                          fontSize=\"8\"\n                          fontWeight=\"bold\"\n                        >\n                          PP\n                        </text>\n                        <text\n                          x=\"0\"\n                          y={HOP_NODE_SIZE / 2 + 8}\n                          textAnchor=\"middle\"\n                          fill=\"black\"\n                          fontSize=\"7\"\n                        >\n                          {hop.patch_panel?.name ||\n                            `PP ${hop.patch_panel_port}`}\n                        </text>\n                        {/* Port Status on Patch Panel */}\n                        <g transform=\"translate(10, -10)\">\n                          {hop.is_port_up ? (\n                            <Wifi size={10} color=\"green\" />\n                          ) : (\n                            <WifiOff size={10} color=\"red\" />\n                          )}\n                        </g>\n                      </g>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n          </svg>\n          {numPaths === 0 && (\n            <p className=\"absolute text-xl text-gray-600\">\n              No PCs found connected to this switch.\n            </p>\n          )}\n        </div>\n\n        {/* Footer for status legend */}\n        <div className=\"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\">\n          <div className=\"flex items-center\">\n            <Plug size={16} className=\"text-green-500 mr-1\" /> Port Up (Overall\n            Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <WifiOff size={16} className=\"text-red-500 mr-1\" /> Port Down\n            (Overall Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <Server size={16} className=\"text-red-500 mr-1\" /> Switch\n          </div>\n          <div className=\"flex items-center\">\n            <Laptop size={16} className=\"text-indigo-500 mr-1\" /> PC\n          </div>\n          <div className=\"flex items-center\">\n            <Split size={16} className=\"text-blue-500 mr-1\" /> Patch Panel\n          </div>\n          <div className=\"flex items-center ml-4\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"black\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line to Switch/PC</span>\n          </div>\n          <div className=\"flex items-center\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"gray\"\n                strokeWidth=\"2\"\n                strokeDasharray=\"5 5\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line between Hops</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SwitchDiagramModal;\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,OAAO,EACPC,MAAM,EACNC,MAAM,EACNC,IAAI,EACJC,IAAI,EACJC,OAAO,EACPC,OAAO,EACPC,KAAK,QACA,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,SAASC,kBAAkBA,CAAC;EAC1BC,MAAM;EACNC,OAAO;EACPC,cAAc;EACdC,WAAW;EACXC;AACF,CAAC,EAAE;EACD,IAAI,CAACJ,MAAM,IAAI,CAACE,cAAc,EAAE,OAAO,IAAI;;EAE3C;EACA,MAAMG,mBAAmB,GAAGF,WAAW,CAACG,MAAM,CAC3CC,IAAI,IAAKA,IAAI,CAACC,SAAS,KAAKN,cAAc,CAACO,EAAE,IAAIF,IAAI,CAACG,EACzD,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGN,mBAAmB,CAACO,GAAG,CAAEL,IAAI,IAAK;IAC5D,MAAMM,WAAW,GAAGT,GAAG,CAACU,IAAI,CAAEJ,EAAE,IAAKA,EAAE,CAACD,EAAE,KAAKF,IAAI,CAACQ,KAAK,CAAC;IAC1D,OAAO;MACLC,YAAY,EAAET,IAAI,CAACE,EAAE;MACrBC,EAAE,EAAEG,WAAW;MACfI,IAAI,EAAEV,IAAI,CAACU,IAAI;MAAE;MACjBC,MAAM,EAAEhB,cAAc;MACtBiB,WAAW,EAAEZ,IAAI,CAACY,WAAW;MAC7BC,iBAAiB,EAAEb,IAAI,CAACa;IAC1B,CAAC;EACH,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAG,GAAG,CAAC,CAAC;EACvB,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;EACxB,MAAMC,QAAQ,GAAGF,SAAS,GAAG,CAAC;EAC9B,MAAMG,QAAQ,GAAGF,UAAU,GAAG,CAAC;EAC/B,MAAMG,SAAS,GAAG,GAAG,CAAC,CAAC;EACvB,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAC;EACtB,MAAMC,aAAa,GAAG,EAAE,CAAC,CAAC;;EAE1B,MAAMC,QAAQ,GAAGjB,mBAAmB,CAACkB,MAAM;EAC3C;EACA,MAAMC,SAAS,GAAGF,QAAQ,GAAG,CAAC,GAAI,CAAC,GAAGG,IAAI,CAACC,EAAE,GAAIJ,QAAQ,GAAG,CAAC;;EAE7D;EACA,MAAMK,cAAc,GAAGA,CAACC,EAAE,EAAEC,EAAE,EAAEC,UAAU,KAAK;IAC7C,OAAO;MACLC,CAAC,EAAEH,EAAE,CAACG,CAAC,GAAG,CAACF,EAAE,CAACE,CAAC,GAAGH,EAAE,CAACG,CAAC,IAAID,UAAU;MACpCE,CAAC,EAAEJ,EAAE,CAACI,CAAC,GAAG,CAACH,EAAE,CAACG,CAAC,GAAGJ,EAAE,CAACI,CAAC,IAAIF;IAC5B,CAAC;EACH,CAAC;EAED,oBACEtC,OAAA;IAAKyC,SAAS,EAAC,mFAAmF;IAAAC,QAAA,eAChG1C,OAAA;MAAKyC,SAAS,EAAC,uJAAuJ;MAAAC,QAAA,gBAEpK1C,OAAA;QAAKyC,SAAS,EAAC,2EAA2E;QAAAC,QAAA,gBACxF1C,OAAA;UAAIyC,SAAS,EAAC,mDAAmD;UAAAC,QAAA,gBAC/D1C,OAAA,CAACH,OAAO;YAAC8C,IAAI,EAAE,EAAG;YAACF,SAAS,EAAC;UAAM;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,qBAAiB,EAAC,GAAG,EAC1D3C,cAAc,CAAC4C,IAAI;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB,CAAC,eACL/C,OAAA;UACEiD,OAAO,EAAE9C,OAAQ;UACjBsC,SAAS,EAAC,qGAAqG;UAC/GS,KAAK,EAAC,eAAe;UAAAR,QAAA,eAErB1C,OAAA,CAACT,OAAO;YAACoD,IAAI,EAAE;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGN/C,OAAA;QAAKyC,SAAS,EAAC,oEAAoE;QAAAC,QAAA,gBACjF1C,OAAA;UACEmD,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC,MAAM;UACbC,OAAO,EAAE,OAAO9B,SAAS,IAAIC,UAAU,EAAG;UAAAkB,QAAA,GAGzC7B,mBAAmB,CAACC,GAAG,CAAC,CAACwC,IAAI,EAAEC,SAAS,KAAK;YAC5C,MAAMC,KAAK,GAAGD,SAAS,GAAGvB,SAAS;YACnC,MAAMyB,GAAG,GAAGhC,QAAQ,GAAGE,SAAS,GAAGM,IAAI,CAACyB,GAAG,CAACF,KAAK,CAAC;YAClD,MAAMG,GAAG,GAAGjC,QAAQ,GAAGC,SAAS,GAAGM,IAAI,CAAC2B,GAAG,CAACJ,KAAK,CAAC;;YAElD;YACA,MAAMK,WAAW,GAAG;cAAEtB,CAAC,EAAEkB,GAAG;cAAEjB,CAAC,EAAEmB;YAAI,CAAC;YACtC,MAAMG,eAAe,GAAG;cAAEvB,CAAC,EAAEd,QAAQ;cAAEe,CAAC,EAAEd;YAAS,CAAC;YAEpD,IAAIqC,eAAe,GAAGF,WAAW,CAAC,CAAC;;YAEnC,MAAMG,YAAY,GAAG,EAAE,CAAC,CAAC;YACzBA,YAAY,CAACC,IAAI,CAAC;cAChBC,IAAI,EAAE,IAAI;cACVC,IAAI,EAAEb,IAAI,CAAC1C,EAAE;cACbwD,MAAM,EAAEP,WAAW;cACnBQ,MAAM,EAAEf,IAAI,CAAChC,iBAAiB,CAAE;YAClC,CAAC,CAAC;;YAEF;YACAgC,IAAI,CAACnC,IAAI,CAACmD,OAAO,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAAK;cACnC,MAAMlC,UAAU,GAAG,CAACkC,QAAQ,GAAG,CAAC,KAAKlB,IAAI,CAACnC,IAAI,CAACY,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;cAC5D,MAAM0C,SAAS,GAAGtC,cAAc,CAC9B0B,WAAW,EACXC,eAAe,EACfxB,UACF,CAAC;cACD0B,YAAY,CAACC,IAAI,CAAC;gBAChBC,IAAI,EAAE,IAAI;gBACVC,IAAI,EAAEI,GAAG,CAACG,WAAW;gBACrBN,MAAM,EAAEK,SAAS;gBACjBE,WAAW,EAAEJ,GAAG,CAACK,UAAU,CAAE;cAC/B,CAAC,CAAC;YACJ,CAAC,CAAC;;YAEF;YACAZ,YAAY,CAACC,IAAI,CAAC;cAChBC,IAAI,EAAE,QAAQ;cACdC,IAAI,EAAEb,IAAI,CAAClC,MAAM;cACjBgD,MAAM,EAAEN,eAAe;cACvBa,WAAW,EAAErB,IAAI,CAAChC,iBAAiB,CAAE;YACvC,CAAC,CAAC;YAEF,oBACEtB,OAAA;cAAA0C,QAAA,EAEGsB,YAAY,CAAClD,GAAG,CAAC,CAAC+D,IAAI,EAAEC,CAAC,KAAK;gBAC7B,IAAIA,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC;;gBAE1B,MAAMC,QAAQ,GAAGf,YAAY,CAACc,CAAC,GAAG,CAAC,CAAC;gBACpC,MAAME,WAAW,GACfH,IAAI,CAACX,IAAI,KAAK,QAAQ,IAAIa,QAAQ,CAACb,IAAI,KAAK,IAAI,GAC5CZ,IAAI,CAAChC,iBAAiB,GACpB,OAAO,GACP,KAAK,CAAC;gBAAA,EACRyD,QAAQ,CAACb,IAAI,KAAK,IAAI,IAAIZ,IAAI,CAACnC,IAAI,CAACY,MAAM,KAAK,CAAC,GAChDuB,IAAI,CAAChC,iBAAiB,GACpB,OAAO,GACP,KAAK,CAAC;gBAAA,EACR,MAAM,CAAC,CAAC;;gBAEd,MAAM2D,UAAU,GACbF,QAAQ,CAACb,IAAI,KAAK,IAAI,IAAIZ,IAAI,CAACnC,IAAI,CAACY,MAAM,GAAG,CAAC,IAC/C8C,IAAI,CAACX,IAAI,KAAK,IAAI,GACd,KAAK,GACL,GAAG,CAAC,CAAC;;gBAEX,oBACElE,OAAA;kBAEEkF,EAAE,EAAEH,QAAQ,CAACX,MAAM,CAAC7B,CAAE;kBACtB4C,EAAE,EAAEJ,QAAQ,CAACX,MAAM,CAAC5B,CAAE;kBACtB4C,EAAE,EAAEP,IAAI,CAACT,MAAM,CAAC7B,CAAE;kBAClB8C,EAAE,EAAER,IAAI,CAACT,MAAM,CAAC5B,CAAE;kBAClB8C,MAAM,EAAEN,WAAY;kBACpBO,WAAW,EAAC,GAAG;kBACfC,eAAe,EAAEP;gBAAW,GAPvB,QAAQ3B,IAAI,CAACpC,YAAY,IAAI4D,CAAC,EAAE;kBAAAlC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAQtC,CAAC;cAEN,CAAC;YAAC,GAnCI,aAAaO,IAAI,CAACpC,YAAY,EAAE;cAAA0B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAoCrC,CAAC;UAER,CAAC,CAAC,eAGF/C,OAAA;YAAGyF,SAAS,EAAE,aAAahE,QAAQ,KAAKC,QAAQ,GAAI;YAAAgB,QAAA,gBAClD1C,OAAA;cACE0F,EAAE,EAAC,GAAG;cACNC,EAAE,EAAC,GAAG;cACNC,CAAC,EAAEhE,SAAS,GAAG,CAAE;cACjBiE,IAAI,EAAC,SAAS;cACdP,MAAM,EAAC,SAAS;cAChBC,WAAW,EAAC;YAAG;cAAA3C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB,CAAC,eACF/C,OAAA;cACEuC,CAAC,EAAC,GAAG;cACLC,CAAC,EAAC,GAAG;cACLsD,UAAU,EAAC,QAAQ;cACnBD,IAAI,EAAC,OAAO;cACZE,QAAQ,EAAC,IAAI;cACbC,UAAU,EAAC,MAAM;cAAAtD,QAAA,EAClB;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACP/C,OAAA;cACEuC,CAAC,EAAC,GAAG;cACLC,CAAC,EAAEZ,SAAS,GAAG,CAAC,GAAG,EAAG;cACtBkE,UAAU,EAAC,QAAQ;cACnBD,IAAI,EAAC,OAAO;cACZE,QAAQ,EAAC,IAAI;cAAArD,QAAA,EAEZtC,cAAc,CAAC4C;YAAI;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB,CAAC,eACP/C,OAAA,CAACR,MAAM;cAAC+C,CAAC,EAAC,KAAK;cAACC,CAAC,EAAC,KAAK;cAACG,IAAI,EAAE,EAAG;cAACsD,KAAK,EAAC;YAAO;cAAArD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC,EAGHlC,mBAAmB,CAACC,GAAG,CAAC,CAACwC,IAAI,EAAEC,SAAS,KAAK;YAAA,IAAA2C,QAAA;YAC5C,MAAM1C,KAAK,GAAGD,SAAS,GAAGvB,SAAS;YACnC,MAAMyB,GAAG,GAAGhC,QAAQ,GAAGE,SAAS,GAAGM,IAAI,CAACyB,GAAG,CAACF,KAAK,CAAC;YAClD,MAAMG,GAAG,GAAGjC,QAAQ,GAAGC,SAAS,GAAGM,IAAI,CAAC2B,GAAG,CAACJ,KAAK,CAAC;YAElD,oBACExD,OAAA;cAEEyF,SAAS,EAAE,aAAahC,GAAG,KAAKE,GAAG,GAAI;cAAAjB,QAAA,gBAEvC1C,OAAA;gBACE0F,EAAE,EAAC,GAAG;gBACNC,EAAE,EAAC,GAAG;gBACNC,CAAC,EAAEhE,SAAS,GAAG,CAAE;gBACjBiE,IAAI,EAAC,SAAS;gBACdP,MAAM,EAAC,SAAS;gBAChBC,WAAW,EAAC;cAAG;gBAAA3C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChB,CAAC,eACF/C,OAAA;gBACEuC,CAAC,EAAC,GAAG;gBACLC,CAAC,EAAC,GAAG;gBACLsD,UAAU,EAAC,QAAQ;gBACnBD,IAAI,EAAC,OAAO;gBACZE,QAAQ,EAAC,IAAI;gBACbC,UAAU,EAAC,MAAM;gBAAAtD,QAAA,EAClB;cAED;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACP/C,OAAA;gBACEuC,CAAC,EAAC,GAAG;gBACLC,CAAC,EAAEZ,SAAS,GAAG,CAAC,GAAG,EAAG;gBACtBkE,UAAU,EAAC,QAAQ;gBACnBD,IAAI,EAAC,OAAO;gBACZE,QAAQ,EAAC,GAAG;gBAAArD,QAAA,EAEX,EAAAwD,QAAA,GAAA5C,IAAI,CAAC1C,EAAE,cAAAsF,QAAA,uBAAPA,QAAA,CAASlD,IAAI,KAAI;cAAK;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnB,CAAC,eACP/C,OAAA,CAACP,MAAM;gBAAC8C,CAAC,EAAC,KAAK;gBAACC,CAAC,EAAC,KAAK;gBAACG,IAAI,EAAE,EAAG;gBAACsD,KAAK,EAAC;cAAO;gBAAArD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAElD/C,OAAA;gBAAGyF,SAAS,EAAC,oBAAoB;gBAAA/C,QAAA,EAC9BY,IAAI,CAAChC,iBAAiB,gBACrBtB,OAAA,CAACL,IAAI;kBAACgD,IAAI,EAAE,EAAG;kBAACsD,KAAK,EAAC;gBAAO;kBAAArD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,gBAEhC/C,OAAA,CAACJ,OAAO;kBAAC+C,IAAI,EAAE,EAAG;kBAACsD,KAAK,EAAC;gBAAK;kBAAArD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE;cACjC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC;YAAA,GAtCC,WAAWO,IAAI,CAAC1C,EAAE,CAACD,EAAE,EAAE;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAuC3B,CAAC;UAER,CAAC,CAAC,EAGDlC,mBAAmB,CAACC,GAAG,CAAC,CAACwC,IAAI,EAAEC,SAAS,KAAK;YAC5C,MAAMC,KAAK,GAAGD,SAAS,GAAGvB,SAAS;YACnC,MAAM6B,WAAW,GAAG;cAClBtB,CAAC,EAAEd,QAAQ,GAAGE,SAAS,GAAGM,IAAI,CAACyB,GAAG,CAACF,KAAK,CAAC;cACzChB,CAAC,EAAEd,QAAQ,GAAGC,SAAS,GAAGM,IAAI,CAAC2B,GAAG,CAACJ,KAAK;YAC1C,CAAC;YACD,MAAMM,eAAe,GAAG;cAAEvB,CAAC,EAAEd,QAAQ;cAAEe,CAAC,EAAEd;YAAS,CAAC;YACpD,MAAMyE,iBAAiB,GAAG,CAAC,IAAI7C,IAAI,CAACnC,IAAI,CAACY,MAAM,GAAG,CAAC,CAAC;YAEpD,oBACE/B,OAAA,CAACV,KAAK,CAAC8G,QAAQ;cAAA1D,QAAA,EACZY,IAAI,CAACnC,IAAI,CAACL,GAAG,CAAC,CAACyD,GAAG,EAAEC,QAAQ,KAAK;gBAAA,IAAA6B,gBAAA;gBAChC,MAAMC,SAAS,GAAGnE,cAAc,CAC9B0B,WAAW,EACXC,eAAe,EACfU,QAAQ,GAAG2B,iBACb,CAAC;gBACD,MAAMI,SAAS,GAAGpE,cAAc,CAC9B0B,WAAW,EACXC,eAAe,EACf,CAACU,QAAQ,GAAG,CAAC,IAAI2B,iBACnB,CAAC;gBACD,MAAMK,QAAQ,GAAG,CAACF,SAAS,CAAC/D,CAAC,GAAGgE,SAAS,CAAChE,CAAC,IAAI,CAAC;gBAChD,MAAMkE,QAAQ,GAAG,CAACH,SAAS,CAAC9D,CAAC,GAAG+D,SAAS,CAAC/D,CAAC,IAAI,CAAC;gBAEhD,oBACExC,OAAA;kBAEEyF,SAAS,EAAE,aAAae,QAAQ,KAAKC,QAAQ,GAAI;kBAAA/D,QAAA,gBAEjD1C,OAAA;oBACE0F,EAAE,EAAC,GAAG;oBACNC,EAAE,EAAC,GAAG;oBACNC,CAAC,EAAE/D,aAAa,GAAG,CAAE;oBACrBgE,IAAI,EAAC,SAAS;oBACdP,MAAM,EAAC,SAAS;oBAChBC,WAAW,EAAC;kBAAG;oBAAA3C,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChB,CAAC,eACF/C,OAAA;oBACEuC,CAAC,EAAC,GAAG;oBACLC,CAAC,EAAC,GAAG;oBACLsD,UAAU,EAAC,QAAQ;oBACnBD,IAAI,EAAC,OAAO;oBACZE,QAAQ,EAAC,GAAG;oBACZC,UAAU,EAAC,MAAM;oBAAAtD,QAAA,EAClB;kBAED;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC,eACP/C,OAAA;oBACEuC,CAAC,EAAC,GAAG;oBACLC,CAAC,EAAEX,aAAa,GAAG,CAAC,GAAG,CAAE;oBACzBiE,UAAU,EAAC,QAAQ;oBACnBD,IAAI,EAAC,OAAO;oBACZE,QAAQ,EAAC,GAAG;oBAAArD,QAAA,EAEX,EAAA2D,gBAAA,GAAA9B,GAAG,CAACG,WAAW,cAAA2B,gBAAA,uBAAfA,gBAAA,CAAiBrD,IAAI,KACpB,MAAMuB,GAAG,CAACmC,gBAAgB;kBAAE;oBAAA9D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC1B,CAAC,eAEP/C,OAAA;oBAAGyF,SAAS,EAAC,oBAAoB;oBAAA/C,QAAA,EAC9B6B,GAAG,CAACK,UAAU,gBACb5E,OAAA,CAACL,IAAI;sBAACgD,IAAI,EAAE,EAAG;sBAACsD,KAAK,EAAC;oBAAO;sBAAArD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC,gBAEhC/C,OAAA,CAACJ,OAAO;sBAAC+C,IAAI,EAAE,EAAG;sBAACsD,KAAK,EAAC;oBAAK;sBAAArD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE;kBACjC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC;gBAAA,GAtCC,YAAYwB,GAAG,CAAC5D,EAAE,IAAI2C,IAAI,CAACpC,YAAY,EAAE;kBAAA0B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAuC7C,CAAC;cAER,CAAC;YAAC,GA1DiB,YAAYO,IAAI,CAACpC,YAAY,EAAE;cAAA0B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA2DpC,CAAC;UAErB,CAAC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,EACLjB,QAAQ,KAAK,CAAC,iBACb9B,OAAA;UAAGyC,SAAS,EAAC,gCAAgC;UAAAC,QAAA,EAAC;QAE9C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACJ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGN/C,OAAA;QAAKyC,SAAS,EAAC,iGAAiG;QAAAC,QAAA,gBAC9G1C,OAAA;UAAKyC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC1C,OAAA,CAACN,IAAI;YAACiD,IAAI,EAAE,EAAG;YAACF,SAAS,EAAC;UAAqB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,iCAEpD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN/C,OAAA;UAAKyC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC1C,OAAA,CAACJ,OAAO;YAAC+C,IAAI,EAAE,EAAG;YAACF,SAAS,EAAC;UAAmB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,mCAErD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN/C,OAAA;UAAKyC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC1C,OAAA,CAACR,MAAM;YAACmD,IAAI,EAAE,EAAG;YAACF,SAAS,EAAC;UAAmB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,WACpD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN/C,OAAA;UAAKyC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC1C,OAAA,CAACP,MAAM;YAACkD,IAAI,EAAE,EAAG;YAACF,SAAS,EAAC;UAAsB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,OACvD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN/C,OAAA;UAAKyC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC1C,OAAA,CAACF,KAAK;YAAC6C,IAAI,EAAE,EAAG;YAACF,SAAS,EAAC;UAAoB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBACpD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN/C,OAAA;UAAKyC,SAAS,EAAC,wBAAwB;UAAAC,QAAA,gBACrC1C,OAAA;YAAKmD,KAAK,EAAC,IAAI;YAACC,MAAM,EAAC,IAAI;YAAAV,QAAA,eACzB1C,OAAA;cACEkF,EAAE,EAAC,GAAG;cACNC,EAAE,EAAC,GAAG;cACNC,EAAE,EAAC,IAAI;cACPC,EAAE,EAAC,GAAG;cACNC,MAAM,EAAC,OAAO;cACdC,WAAW,EAAC;YAAG;cAAA3C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACN/C,OAAA;YAAMyC,SAAS,EAAC,MAAM;YAAAC,QAAA,EAAC;UAAiB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACN/C,OAAA;UAAKyC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC1C,OAAA;YAAKmD,KAAK,EAAC,IAAI;YAACC,MAAM,EAAC,IAAI;YAAAV,QAAA,eACzB1C,OAAA;cACEkF,EAAE,EAAC,GAAG;cACNC,EAAE,EAAC,GAAG;cACNC,EAAE,EAAC,IAAI;cACPC,EAAE,EAAC,GAAG;cACNC,MAAM,EAAC,MAAM;cACbC,WAAW,EAAC,GAAG;cACfC,eAAe,EAAC;YAAK;cAAA5C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACN/C,OAAA;YAAMyC,SAAS,EAAC,MAAM;YAAAC,QAAA,EAAC;UAAiB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC4D,EAAA,GApXQ1G,kBAAkB;AAsX3B,eAAeA,kBAAkB;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}