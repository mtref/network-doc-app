{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n// This is the main React component for the frontend application.\n// It manages the state for PCs, Patch Panels, Servers, and Connections,\n// and orchestrates the display of various components.\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ConnectionList from './components/ConnectionList';\nimport ConnectionForm from './components/ConnectionForm';\nimport SearchBar from './components/SearchBar';\n\n// Base URL for the backend API. When running in Docker Compose,\n// 'backend' is the service name and resolves to the backend container's IP.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' // In production, proxy requests through Nginx or similar\n: 'http://localhost:5004'; // For local development with 'npm start', updated port to 5004\n\nfunction App() {\n  _s();\n  // State variables to store fetched data\n  const [pcs, setPcs] = useState([]);\n  const [patchPanels, setPatchPanels] = useState([]);\n  const [servers, setServers] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [filteredConnections, setFilteredConnections] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingConnection, setEditingConnection] = useState(null); // State for editing connections\n  const [message, setMessage] = useState(''); // General message for success/error\n  const [isMessageVisible, setIsMessageVisible] = useState(false); // Controls message visibility\n\n  // Function to show a message temporarily\n  const showMessage = (msg, duration = 3000) => {\n    setMessage(msg);\n    setIsMessageVisible(true);\n    setTimeout(() => {\n      setIsMessageVisible(false);\n      setMessage('');\n    }, duration);\n  };\n\n  // Memoized function to fetch data from the backend\n  const fetchData = useCallback(async (endpoint, setter) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${endpoint}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setter(data);\n    } catch (error) {\n      console.error(`Failed to fetch ${endpoint}:`, error);\n      showMessage(`Error fetching ${endpoint}: ${error.message}`, 5000);\n    }\n  }, []);\n\n  // Fetch all initial data when the component mounts\n  useEffect(() => {\n    fetchData('pcs', setPcs);\n    fetchData('patch_panels', setPatchPanels);\n    fetchData('servers', setServers);\n    fetchData('connections', setConnections);\n  }, [fetchData]);\n\n  // Effect to filter connections whenever connections or searchTerm changes\n  useEffect(() => {\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    const filtered = connections.filter(connection => {\n      var _connection$pc, _connection$pc2, _connection$server;\n      // Search across PC name, PC IP Address, Server name, Server Port\n      const matchesMainConnection = (((_connection$pc = connection.pc) === null || _connection$pc === void 0 ? void 0 : _connection$pc.name) || '').toLowerCase().includes(lowerCaseSearchTerm) || (((_connection$pc2 = connection.pc) === null || _connection$pc2 === void 0 ? void 0 : _connection$pc2.ip_address) || '').toLowerCase().includes(lowerCaseSearchTerm) || (((_connection$server = connection.server) === null || _connection$server === void 0 ? void 0 : _connection$server.name) || '').toLowerCase().includes(lowerCaseSearchTerm) || (connection.server_port || '').toLowerCase().includes(lowerCaseSearchTerm);\n\n      // Search through each hop's patch panel name and port\n      const matchesHops = connection.hops.some(hop => {\n        var _hop$patch_panel, _hop$patch_panel2;\n        return (((_hop$patch_panel = hop.patch_panel) === null || _hop$patch_panel === void 0 ? void 0 : _hop$patch_panel.name) || '').toLowerCase().includes(lowerCaseSearchTerm) || (((_hop$patch_panel2 = hop.patch_panel) === null || _hop$patch_panel2 === void 0 ? void 0 : _hop$patch_panel2.location) || '').toLowerCase().includes(lowerCaseSearchTerm) || (hop.patch_panel_port || '').toLowerCase().includes(lowerCaseSearchTerm);\n      });\n      return matchesMainConnection || matchesHops;\n    });\n    setFilteredConnections(filtered);\n  }, [connections, searchTerm]);\n\n  // Handle adding a new connection\n  const handleAddConnection = async newConnectionData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newConnectionData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      // const addedConnection = await response.json(); // Removed unused variable\n      // To ensure all nested data (hops, pc, server) is fully populated after add\n      // we re-fetch all connections. For a real app, you might parse `addedConnection` more deeply.\n      fetchData('connections', setConnections);\n      showMessage('Connection added successfully!');\n    } catch (error) {\n      console.error('Error adding connection:', error);\n      showMessage(`Error adding connection: ${error.message}`, 5000);\n    }\n    setEditingConnection(null); // Clear editing state after add\n  };\n\n  // Handle updating an existing connection\n  const handleUpdateConnection = async (id, updatedConnectionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedConnectionData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      // const updatedConn = await response.json(); // Removed unused variable\n      // Re-fetch all connections to ensure UI is fully consistent with backend after update\n      fetchData('connections', setConnections);\n      showMessage('Connection updated successfully!');\n    } catch (error) {\n      console.error('Error updating connection:', error);\n      showMessage(`Error updating connection: ${error.message}`, 5000);\n    }\n    setEditingConnection(null); // Clear editing state after update\n  };\n\n  // Handle deleting a connection\n  const handleDeleteConnection = async id => {\n    // Implement a custom modal for confirmation instead of alert/confirm\n    const confirmed = window.confirm(\"Are you sure you want to delete this connection?\");\n    if (!confirmed) {\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      setConnections(prev => prev.filter(conn => conn.id !== id));\n      showMessage('Connection deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting connection:', error);\n      showMessage(`Error deleting connection: ${error.message}`, 5000);\n    }\n  };\n\n  // Handle editing a connection (set the connection to be edited in state)\n  const handleEditConnection = connection => {\n    // When editing, transform the hops array back into a format expected by ConnectionForm\n    const formattedHops = connection.hops.map(hop => ({\n      patch_panel_id: hop.patch_panel.id,\n      patch_panel_port: hop.patch_panel_port\n    }));\n    setEditingConnection({\n      ...connection,\n      pc_id: connection.pc.id,\n      server_id: connection.server.id,\n      hops: formattedHops // Set formatted hops for the form\n    });\n  };\n\n  // Function to add a new PC (simplified for demo, typically a separate form)\n  const handleAddEntity = async (type, data) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${type}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const newEntity = await response.json();\n      if (type === 'pcs') setPcs(prev => [...prev, newEntity]);\n      if (type === 'patch_panels') setPatchPanels(prev => [...prev, newEntity]);\n      if (type === 'servers') setServers(prev => [...prev, newEntity]);\n      showMessage(`${type.slice(0, -1).toUpperCase()} added successfully!`);\n    } catch (error) {\n      console.error(`Error adding ${type}:`, error);\n      showMessage(`Error adding ${type}: ${error.message}`, 5000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-gray-100 to-blue-200 font-inter p-4 sm:p-8\",\n    children: [isMessageVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-4 left-1/2 -translate-x-1/2 bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in-down\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"mb-8 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-extrabold text-blue-800 tracking-tight sm:text-5xl\",\n        children: \"Network Device Documentation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-lg text-gray-600\",\n        children: \"Track your network connections from PC to Patch Panel to Server with ease.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-6 sm:p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8\",\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          searchTerm: searchTerm,\n          onSearchChange: setSearchTerm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"mb-10 p-6 bg-blue-50 rounded-lg border border-blue-200 shadow-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-blue-700 mb-4\",\n          children: editingConnection ? 'Edit Connection' : 'Add New Connection'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionForm, {\n          pcs: pcs,\n          patchPanels: patchPanels,\n          servers: servers,\n          onAddConnection: handleAddConnection,\n          onUpdateConnection: handleUpdateConnection,\n          editingConnection: editingConnection,\n          setEditingConnection: setEditingConnection // Allow form to clear editing state\n          ,\n          onAddEntity: handleAddEntity // Pass the add entity function\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-blue-700 mb-6\",\n          children: \"All Connections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionList, {\n          connections: filteredConnections,\n          onDelete: handleDeleteConnection,\n          onEdit: handleEditConnection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), filteredConnections.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-gray-500 text-lg mt-8\",\n          children: \"No connections found. Start by adding one above or adjust your search.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"mt-12 text-center text-gray-500 text-sm\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2025 Network Doc App. All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bTY8egSTwr/sgQjATVkh/3ZzIOM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ConnectionList","ConnectionForm","SearchBar","jsxDEV","_jsxDEV","API_BASE_URL","process","env","NODE_ENV","App","_s","pcs","setPcs","patchPanels","setPatchPanels","servers","setServers","connections","setConnections","filteredConnections","setFilteredConnections","searchTerm","setSearchTerm","editingConnection","setEditingConnection","message","setMessage","isMessageVisible","setIsMessageVisible","showMessage","msg","duration","setTimeout","fetchData","endpoint","setter","response","fetch","ok","Error","status","data","json","error","console","lowerCaseSearchTerm","toLowerCase","filtered","filter","connection","_connection$pc","_connection$pc2","_connection$server","matchesMainConnection","pc","name","includes","ip_address","server","server_port","matchesHops","hops","some","hop","_hop$patch_panel","_hop$patch_panel2","patch_panel","location","patch_panel_port","handleAddConnection","newConnectionData","method","headers","body","JSON","stringify","errorData","handleUpdateConnection","id","updatedConnectionData","handleDeleteConnection","confirmed","window","confirm","prev","conn","handleEditConnection","formattedHops","map","patch_panel_id","pc_id","server_id","handleAddEntity","type","newEntity","slice","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearchChange","onAddConnection","onUpdateConnection","onAddEntity","onDelete","onEdit","length","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["// frontend/src/App.js\n// This is the main React component for the frontend application.\n// It manages the state for PCs, Patch Panels, Servers, and Connections,\n// and orchestrates the display of various components.\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ConnectionList from './components/ConnectionList';\nimport ConnectionForm from './components/ConnectionForm';\nimport SearchBar from './components/SearchBar';\n\n// Base URL for the backend API. When running in Docker Compose,\n// 'backend' is the service name and resolves to the backend container's IP.\nconst API_BASE_URL = process.env.NODE_ENV === 'production'\n  ? '/api' // In production, proxy requests through Nginx or similar\n  : 'http://localhost:5004'; // For local development with 'npm start', updated port to 5004\n\nfunction App() {\n  // State variables to store fetched data\n  const [pcs, setPcs] = useState([]);\n  const [patchPanels, setPatchPanels] = useState([]);\n  const [servers, setServers] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [filteredConnections, setFilteredConnections] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingConnection, setEditingConnection] = useState(null); // State for editing connections\n  const [message, setMessage] = useState(''); // General message for success/error\n  const [isMessageVisible, setIsMessageVisible] = useState(false); // Controls message visibility\n\n  // Function to show a message temporarily\n  const showMessage = (msg, duration = 3000) => {\n    setMessage(msg);\n    setIsMessageVisible(true);\n    setTimeout(() => {\n      setIsMessageVisible(false);\n      setMessage('');\n    }, duration);\n  };\n\n  // Memoized function to fetch data from the backend\n  const fetchData = useCallback(async (endpoint, setter) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${endpoint}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setter(data);\n    } catch (error) {\n      console.error(`Failed to fetch ${endpoint}:`, error);\n      showMessage(`Error fetching ${endpoint}: ${error.message}`, 5000);\n    }\n  }, []);\n\n  // Fetch all initial data when the component mounts\n  useEffect(() => {\n    fetchData('pcs', setPcs);\n    fetchData('patch_panels', setPatchPanels);\n    fetchData('servers', setServers);\n    fetchData('connections', setConnections);\n  }, [fetchData]);\n\n  // Effect to filter connections whenever connections or searchTerm changes\n  useEffect(() => {\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    const filtered = connections.filter(connection => {\n      // Search across PC name, PC IP Address, Server name, Server Port\n      const matchesMainConnection =\n        (connection.pc?.name || '').toLowerCase().includes(lowerCaseSearchTerm) ||\n        (connection.pc?.ip_address || '').toLowerCase().includes(lowerCaseSearchTerm) ||\n        (connection.server?.name || '').toLowerCase().includes(lowerCaseSearchTerm) ||\n        (connection.server_port || '').toLowerCase().includes(lowerCaseSearchTerm);\n\n      // Search through each hop's patch panel name and port\n      const matchesHops = connection.hops.some(hop =>\n        (hop.patch_panel?.name || '').toLowerCase().includes(lowerCaseSearchTerm) ||\n        (hop.patch_panel?.location || '').toLowerCase().includes(lowerCaseSearchTerm) ||\n        (hop.patch_panel_port || '').toLowerCase().includes(lowerCaseSearchTerm)\n      );\n\n      return matchesMainConnection || matchesHops;\n    });\n    setFilteredConnections(filtered);\n  }, [connections, searchTerm]);\n\n  // Handle adding a new connection\n  const handleAddConnection = async (newConnectionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newConnectionData),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      // const addedConnection = await response.json(); // Removed unused variable\n      // To ensure all nested data (hops, pc, server) is fully populated after add\n      // we re-fetch all connections. For a real app, you might parse `addedConnection` more deeply.\n      fetchData('connections', setConnections);\n      showMessage('Connection added successfully!');\n    }\n    catch (error) {\n      console.error('Error adding connection:', error);\n      showMessage(`Error adding connection: ${error.message}`, 5000);\n    }\n    setEditingConnection(null); // Clear editing state after add\n  };\n\n  // Handle updating an existing connection\n  const handleUpdateConnection = async (id, updatedConnectionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedConnectionData),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      // const updatedConn = await response.json(); // Removed unused variable\n      // Re-fetch all connections to ensure UI is fully consistent with backend after update\n      fetchData('connections', setConnections);\n      showMessage('Connection updated successfully!');\n    } catch (error) {\n      console.error('Error updating connection:', error);\n      showMessage(`Error updating connection: ${error.message}`, 5000);\n    }\n    setEditingConnection(null); // Clear editing state after update\n  };\n\n  // Handle deleting a connection\n  const handleDeleteConnection = async (id) => {\n    // Implement a custom modal for confirmation instead of alert/confirm\n    const confirmed = window.confirm(\"Are you sure you want to delete this connection?\");\n    if (!confirmed) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      setConnections(prev => prev.filter(conn => conn.id !== id));\n      showMessage('Connection deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting connection:', error);\n      showMessage(`Error deleting connection: ${error.message}`, 5000);\n    }\n  };\n\n  // Handle editing a connection (set the connection to be edited in state)\n  const handleEditConnection = (connection) => {\n    // When editing, transform the hops array back into a format expected by ConnectionForm\n    const formattedHops = connection.hops.map(hop => ({\n      patch_panel_id: hop.patch_panel.id,\n      patch_panel_port: hop.patch_panel_port\n    }));\n    setEditingConnection({\n      ...connection,\n      pc_id: connection.pc.id,\n      server_id: connection.server.id,\n      hops: formattedHops // Set formatted hops for the form\n    });\n  };\n\n  // Function to add a new PC (simplified for demo, typically a separate form)\n  const handleAddEntity = async (type, data) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${type}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const newEntity = await response.json();\n      if (type === 'pcs') setPcs(prev => [...prev, newEntity]);\n      if (type === 'patch_panels') setPatchPanels(prev => [...prev, newEntity]);\n      if (type === 'servers') setServers(prev => [...prev, newEntity]);\n      showMessage(`${type.slice(0, -1).toUpperCase()} added successfully!`);\n    } catch (error) {\n      console.error(`Error adding ${type}:`, error);\n      showMessage(`Error adding ${type}: ${error.message}`, 5000);\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-100 to-blue-200 font-inter p-4 sm:p-8\">\n      {/* Global Message Box */}\n      {isMessageVisible && (\n        <div className=\"fixed top-4 left-1/2 -translate-x-1/2 bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in-down\">\n          {message}\n        </div>\n      )}\n\n      {/* Header Section */}\n      <header className=\"mb-8 text-center\">\n        <h1 className=\"text-4xl font-extrabold text-blue-800 tracking-tight sm:text-5xl\">\n          Network Device Documentation\n        </h1>\n        <p className=\"mt-2 text-lg text-gray-600\">\n          Track your network connections from PC to Patch Panel to Server with ease.\n        </p>\n      </header>\n\n      {/* Main Content Area */}\n      <main className=\"max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-6 sm:p-8\">\n        {/* Search Bar */}\n        <div className=\"mb-8\">\n          <SearchBar searchTerm={searchTerm} onSearchChange={setSearchTerm} />\n        </div>\n\n        {/* Connection Form Section */}\n        <section className=\"mb-10 p-6 bg-blue-50 rounded-lg border border-blue-200 shadow-inner\">\n          <h2 className=\"text-2xl font-bold text-blue-700 mb-4\">\n            {editingConnection ? 'Edit Connection' : 'Add New Connection'}\n          </h2>\n          <ConnectionForm\n            pcs={pcs}\n            patchPanels={patchPanels}\n            servers={servers}\n            onAddConnection={handleAddConnection}\n            onUpdateConnection={handleUpdateConnection}\n            editingConnection={editingConnection}\n            setEditingConnection={setEditingConnection} // Allow form to clear editing state\n            onAddEntity={handleAddEntity} // Pass the add entity function\n          />\n        </section>\n\n        {/* Connection List Section */}\n        <section>\n          <h2 className=\"text-2xl font-bold text-blue-700 mb-6\">All Connections</h2>\n          <ConnectionList\n            connections={filteredConnections}\n            onDelete={handleDeleteConnection}\n            onEdit={handleEditConnection}\n          />\n          {filteredConnections.length === 0 && (\n            <p className=\"text-center text-gray-500 text-lg mt-8\">\n              No connections found. Start by adding one above or adjust your search.\n            </p>\n          )}\n        </section>\n      </main>\n\n      {/* Footer (Optional) */}\n      <footer className=\"mt-12 text-center text-gray-500 text-sm\">\n        <p>&copy; 2025 Network Doc App. All rights reserved.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}