{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n// This is the main React component for the frontend application.\n// It manages the state for PCs, Patch Panels, Switches, and Connections,\n// and orchestrates the display of various components.\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport ConnectionList from \"./components/ConnectionList\";\nimport ConnectionForm from \"./components/ConnectionForm\";\nimport SearchBar from \"./components/SearchBar\";\nimport PortStatusModal from \"./components/PortStatusModal\"; // New component for port status display\n\n// Base URL for the backend API. When running in Docker Compose,\n// 'backend' is the service name and resolves to the backend container's IP.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.NODE_ENV === \"production\" ? \"/api\" // In production, proxy requests through Nginx or similar\n: \"http://localhost:5004\"; // For local development with 'npm start', updated port to 5004\n\nfunction App() {\n  _s();\n  // State variables to store fetched data\n  const [pcs, setPcs] = useState([]);\n  const [patchPanels, setPatchPanels] = useState([]);\n  const [switches, setSwitches] = useState([]); // Renamed from servers\n  const [connections, setConnections] = useState([]);\n  const [filteredConnections, setFilteredConnections] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingConnection, setEditingConnection] = useState(null); // State for editing connections\n  const [message, setMessage] = useState(\"\"); // General message for success/error\n  const [isMessageVisible, setIsMessageVisible] = useState(false); // Controls message visibility\n\n  // State for Port Status Modal\n  const [showPortStatusModal, setShowPortStatusModal] = useState(false);\n  const [portStatusData, setPortStatusData] = useState(null); // Data for the modal\n  const [modalEntityType, setModalEntityType] = useState(null); // 'patch_panel' or 'switch'\n  const [modalEntityId, setModalEntityId] = useState(null); // ID of the entity to fetch ports for\n\n  // Function to show a message temporarily\n  const showMessage = (msg, duration = 3000) => {\n    setMessage(msg);\n    setIsMessageVisible(true);\n    setTimeout(() => {\n      setIsMessageVisible(false);\n      setMessage(\"\");\n    }, duration);\n  };\n\n  // Memoized function to fetch data from the backend\n  const fetchData = useCallback(async (endpoint, setter) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${endpoint}`);\n      if (!response.ok) {\n        // Attempt to parse JSON error message if available\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setter(data);\n    } catch (error) {\n      console.error(`Failed to fetch ${endpoint}:`, error);\n      showMessage(`Error fetching ${endpoint}: ${error.message}`, 5000);\n    }\n  }, []);\n\n  // Fetch all initial data when the component mounts\n  useEffect(() => {\n    fetchData(\"pcs\", setPcs);\n    fetchData(\"patch_panels\", setPatchPanels);\n    fetchData(\"switches\", setSwitches); // Renamed from servers\n    fetchData(\"connections\", setConnections);\n  }, [fetchData]);\n\n  // Effect to filter connections whenever connections or searchTerm changes\n  useEffect(() => {\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    const filtered = connections.filter(connection => {\n      var _connection$pc, _connection$pc2, _connection$switch;\n      // Search across PC name, PC IP Address, Switch name, Switch Port\n      const matchesMainConnection = (((_connection$pc = connection.pc) === null || _connection$pc === void 0 ? void 0 : _connection$pc.name) || \"\").toLowerCase().includes(lowerCaseSearchTerm) || (((_connection$pc2 = connection.pc) === null || _connection$pc2 === void 0 ? void 0 : _connection$pc2.ip_address) || \"\").toLowerCase().includes(lowerCaseSearchTerm) || (((_connection$switch = connection.switch) === null || _connection$switch === void 0 ? void 0 : _connection$switch.name) || \"\").toLowerCase().includes(lowerCaseSearchTerm) ||\n      // Renamed from server\n      (connection.switch_port || \"\").toLowerCase().includes(lowerCaseSearchTerm); // Renamed from server_port\n\n      // Search through each hop's patch panel name, location, and port\n      const matchesHops = connection.hops.some(hop => {\n        var _hop$patch_panel, _hop$patch_panel2;\n        return (((_hop$patch_panel = hop.patch_panel) === null || _hop$patch_panel === void 0 ? void 0 : _hop$patch_panel.name) || \"\").toLowerCase().includes(lowerCaseSearchTerm) || (((_hop$patch_panel2 = hop.patch_panel) === null || _hop$patch_panel2 === void 0 ? void 0 : _hop$patch_panel2.location) || \"\").toLowerCase().includes(lowerCaseSearchTerm) || (hop.patch_panel_port || \"\").toLowerCase().includes(lowerCaseSearchTerm);\n      });\n      return matchesMainConnection || matchesHops;\n    });\n    setFilteredConnections(filtered);\n  }, [connections, searchTerm]);\n\n  // Handle adding a new connection\n  const handleAddConnection = async newConnectionData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newConnectionData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      fetchData(\"connections\", setConnections); // Re-fetch all connections to update UI\n      showMessage(\"Connection added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding connection:\", error);\n      showMessage(`Error adding connection: ${error.message}`, 8000); // Display error longer\n    }\n    setEditingConnection(null); // Clear editing state after add\n  };\n\n  // Handle updating an existing connection\n  const handleUpdateConnection = async (id, updatedConnectionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedConnectionData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      fetchData(\"connections\", setConnections); // Re-fetch all connections to update UI\n      showMessage(\"Connection updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating connection:\", error);\n      showMessage(`Error updating connection: ${error.message}`, 8000); // Display error longer\n    }\n    setEditingConnection(null); // Clear editing state after update\n  };\n\n  // Handle deleting a connection\n  const handleDeleteConnection = async id => {\n    // Implement a custom modal for confirmation instead of alert/confirm\n    const confirmed = window.confirm(\"Are you sure you want to delete this connection?\");\n    if (!confirmed) {\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      setConnections(prev => prev.filter(conn => conn.id !== id));\n      showMessage(\"Connection deleted successfully!\");\n    } catch (error) {\n      console.error(\"Error deleting connection:\", error);\n      showMessage(`Error deleting connection: ${error.message}`, 5000);\n    }\n  };\n\n  // Handle editing a connection (set the connection to be edited in state)\n  const handleEditConnection = connection => {\n    // When editing, transform the hops array back into a format expected by ConnectionForm\n    const formattedHops = connection.hops.map(hop => ({\n      patch_panel_id: hop.patch_panel.id,\n      patch_panel_port: hop.patch_panel_port,\n      is_port_up: hop.is_port_up // Include status for editing\n    }));\n    setEditingConnection({\n      ...connection,\n      pc_id: connection.pc.id,\n      switch_id: connection.switch.id,\n      // Renamed from server_id\n      switch_port: connection.switch_port,\n      // Renamed from server_port\n      is_switch_port_up: connection.is_switch_port_up,\n      // Renamed from is_server_port_up\n      hops: formattedHops // Set formatted hops for the form\n    });\n  };\n\n  // Function to add a new PC, Patch Panel, or Switch\n  const handleAddEntity = async (type, data) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${type}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const newEntity = await response.json();\n      if (type === \"pcs\") setPcs(prev => [...prev, newEntity]);\n      if (type === \"patch_panels\") setPatchPanels(prev => [...prev, newEntity]);\n      if (type === \"switches\") setSwitches(prev => [...prev, newEntity]); // Renamed from servers\n      showMessage(`${type.slice(0, -1).toUpperCase()} added successfully!`);\n      // Re-fetch data relevant to selection dropdowns\n      if (type === \"patch_panels\") fetchData(\"patch_panels\", setPatchPanels);\n      if (type === \"switches\") fetchData(\"switches\", setSwitches); // Renamed from servers\n      if (type === \"pcs\") fetchData(\"pcs\", setPcs);\n    } catch (error) {\n      console.error(`Error adding ${type}:`, error);\n      showMessage(`Error adding ${type}: ${error.message}`, 5000);\n    }\n  };\n\n  // Function to open the port status modal\n  const handleShowPortStatus = async (entityType, entityId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${entityType}/${entityId}/ports`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPortStatusData(data);\n      setModalEntityType(entityType);\n      setModalEntityId(entityId); // Store ID for potential re-fetch if modal stays open\n      setShowPortStatusModal(true);\n    } catch (error) {\n      console.error(`Failed to fetch ${entityType} port status:`, error);\n      showMessage(`Error fetching port status: ${error.message}`, 5000);\n    }\n  };\n  const handleClosePortStatusModal = () => {\n    setShowPortStatusModal(false);\n    setPortStatusData(null);\n    setModalEntityType(null);\n    setModalEntityId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-gray-100 to-blue-200 font-inter p-4 sm:p-8\",\n    children: [isMessageVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-4 left-1/2 -translate-x-1/2 bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in-down\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), showPortStatusModal && portStatusData && /*#__PURE__*/_jsxDEV(PortStatusModal, {\n      isOpen: showPortStatusModal,\n      onClose: handleClosePortStatusModal,\n      data: portStatusData,\n      entityType: modalEntityType,\n      entityId: modalEntityId\n      // Optionally, add a re-fetch mechanism if the modal supports dynamic updates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"mb-8 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-extrabold text-blue-800 tracking-tight sm:text-5xl\",\n        children: \"Network Device Documentation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-lg text-gray-600\",\n        children: \"Track your network connections from PC to Patch Panel to Switch with ease.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-6 sm:p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8\",\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          searchTerm: searchTerm,\n          onSearchChange: setSearchTerm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"mb-10 p-6 bg-blue-50 rounded-lg border border-blue-200 shadow-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-blue-700 mb-4\",\n          children: editingConnection ? \"Edit Connection\" : \"Add New Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionForm, {\n          pcs: pcs,\n          patchPanels: patchPanels,\n          switches: switches // Renamed from servers\n          ,\n          onAddConnection: handleAddConnection,\n          onUpdateConnection: handleUpdateConnection,\n          editingConnection: editingConnection,\n          setEditingConnection: setEditingConnection,\n          onAddEntity: handleAddEntity,\n          onShowPortStatus: handleShowPortStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-blue-700 mb-6\",\n          children: \"All Connections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionList, {\n          connections: filteredConnections,\n          onDelete: handleDeleteConnection,\n          onEdit: handleEditConnection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), filteredConnections.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-gray-500 text-lg mt-8\",\n          children: \"No connections found. Start by adding one above or adjust your search.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"mt-12 text-center text-gray-500 text-sm\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2025 Network Doc App. All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1CDNiEVxc9a7zQSJHGMAGiZbJtM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ConnectionList","ConnectionForm","SearchBar","PortStatusModal","jsxDEV","_jsxDEV","API_BASE_URL","process","env","NODE_ENV","App","_s","pcs","setPcs","patchPanels","setPatchPanels","switches","setSwitches","connections","setConnections","filteredConnections","setFilteredConnections","searchTerm","setSearchTerm","editingConnection","setEditingConnection","message","setMessage","isMessageVisible","setIsMessageVisible","showPortStatusModal","setShowPortStatusModal","portStatusData","setPortStatusData","modalEntityType","setModalEntityType","modalEntityId","setModalEntityId","showMessage","msg","duration","setTimeout","fetchData","endpoint","setter","response","fetch","ok","errorData","json","catch","Error","error","status","data","console","lowerCaseSearchTerm","toLowerCase","filtered","filter","connection","_connection$pc","_connection$pc2","_connection$switch","matchesMainConnection","pc","name","includes","ip_address","switch","switch_port","matchesHops","hops","some","hop","_hop$patch_panel","_hop$patch_panel2","patch_panel","location","patch_panel_port","handleAddConnection","newConnectionData","method","headers","body","JSON","stringify","handleUpdateConnection","id","updatedConnectionData","handleDeleteConnection","confirmed","window","confirm","prev","conn","handleEditConnection","formattedHops","map","patch_panel_id","is_port_up","pc_id","switch_id","is_switch_port_up","handleAddEntity","type","newEntity","slice","toUpperCase","handleShowPortStatus","entityType","entityId","handleClosePortStatusModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","onSearchChange","onAddConnection","onUpdateConnection","onAddEntity","onShowPortStatus","onDelete","onEdit","length","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["// frontend/src/App.js\n// This is the main React component for the frontend application.\n// It manages the state for PCs, Patch Panels, Switches, and Connections,\n// and orchestrates the display of various components.\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport ConnectionList from \"./components/ConnectionList\";\nimport ConnectionForm from \"./components/ConnectionForm\";\nimport SearchBar from \"./components/SearchBar\";\nimport PortStatusModal from \"./components/PortStatusModal\"; // New component for port status display\n\n// Base URL for the backend API. When running in Docker Compose,\n// 'backend' is the service name and resolves to the backend container's IP.\nconst API_BASE_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"/api\" // In production, proxy requests through Nginx or similar\n    : \"http://localhost:5004\"; // For local development with 'npm start', updated port to 5004\n\nfunction App() {\n  // State variables to store fetched data\n  const [pcs, setPcs] = useState([]);\n  const [patchPanels, setPatchPanels] = useState([]);\n  const [switches, setSwitches] = useState([]); // Renamed from servers\n  const [connections, setConnections] = useState([]);\n  const [filteredConnections, setFilteredConnections] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingConnection, setEditingConnection] = useState(null); // State for editing connections\n  const [message, setMessage] = useState(\"\"); // General message for success/error\n  const [isMessageVisible, setIsMessageVisible] = useState(false); // Controls message visibility\n\n  // State for Port Status Modal\n  const [showPortStatusModal, setShowPortStatusModal] = useState(false);\n  const [portStatusData, setPortStatusData] = useState(null); // Data for the modal\n  const [modalEntityType, setModalEntityType] = useState(null); // 'patch_panel' or 'switch'\n  const [modalEntityId, setModalEntityId] = useState(null); // ID of the entity to fetch ports for\n\n  // Function to show a message temporarily\n  const showMessage = (msg, duration = 3000) => {\n    setMessage(msg);\n    setIsMessageVisible(true);\n    setTimeout(() => {\n      setIsMessageVisible(false);\n      setMessage(\"\");\n    }, duration);\n  };\n\n  // Memoized function to fetch data from the backend\n  const fetchData = useCallback(async (endpoint, setter) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${endpoint}`);\n      if (!response.ok) {\n        // Attempt to parse JSON error message if available\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(\n          errorData.error || `HTTP error! status: ${response.status}`\n        );\n      }\n      const data = await response.json();\n      setter(data);\n    } catch (error) {\n      console.error(`Failed to fetch ${endpoint}:`, error);\n      showMessage(`Error fetching ${endpoint}: ${error.message}`, 5000);\n    }\n  }, []);\n\n  // Fetch all initial data when the component mounts\n  useEffect(() => {\n    fetchData(\"pcs\", setPcs);\n    fetchData(\"patch_panels\", setPatchPanels);\n    fetchData(\"switches\", setSwitches); // Renamed from servers\n    fetchData(\"connections\", setConnections);\n  }, [fetchData]);\n\n  // Effect to filter connections whenever connections or searchTerm changes\n  useEffect(() => {\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    const filtered = connections.filter((connection) => {\n      // Search across PC name, PC IP Address, Switch name, Switch Port\n      const matchesMainConnection =\n        (connection.pc?.name || \"\")\n          .toLowerCase()\n          .includes(lowerCaseSearchTerm) ||\n        (connection.pc?.ip_address || \"\")\n          .toLowerCase()\n          .includes(lowerCaseSearchTerm) ||\n        (connection.switch?.name || \"\")\n          .toLowerCase()\n          .includes(lowerCaseSearchTerm) || // Renamed from server\n        (connection.switch_port || \"\")\n          .toLowerCase()\n          .includes(lowerCaseSearchTerm); // Renamed from server_port\n\n      // Search through each hop's patch panel name, location, and port\n      const matchesHops = connection.hops.some(\n        (hop) =>\n          (hop.patch_panel?.name || \"\")\n            .toLowerCase()\n            .includes(lowerCaseSearchTerm) ||\n          (hop.patch_panel?.location || \"\")\n            .toLowerCase()\n            .includes(lowerCaseSearchTerm) ||\n          (hop.patch_panel_port || \"\")\n            .toLowerCase()\n            .includes(lowerCaseSearchTerm)\n      );\n\n      return matchesMainConnection || matchesHops;\n    });\n    setFilteredConnections(filtered);\n  }, [connections, searchTerm]);\n\n  // Handle adding a new connection\n  const handleAddConnection = async (newConnectionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newConnectionData),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.error || `HTTP error! status: ${response.status}`\n        );\n      }\n      fetchData(\"connections\", setConnections); // Re-fetch all connections to update UI\n      showMessage(\"Connection added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding connection:\", error);\n      showMessage(`Error adding connection: ${error.message}`, 8000); // Display error longer\n    }\n    setEditingConnection(null); // Clear editing state after add\n  };\n\n  // Handle updating an existing connection\n  const handleUpdateConnection = async (id, updatedConnectionData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updatedConnectionData),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.error || `HTTP error! status: ${response.status}`\n        );\n      }\n      fetchData(\"connections\", setConnections); // Re-fetch all connections to update UI\n      showMessage(\"Connection updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating connection:\", error);\n      showMessage(`Error updating connection: ${error.message}`, 8000); // Display error longer\n    }\n    setEditingConnection(null); // Clear editing state after update\n  };\n\n  // Handle deleting a connection\n  const handleDeleteConnection = async (id) => {\n    // Implement a custom modal for confirmation instead of alert/confirm\n    const confirmed = window.confirm(\n      \"Are you sure you want to delete this connection?\"\n    );\n    if (!confirmed) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/connections/${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.error || `HTTP error! status: ${response.status}`\n        );\n      }\n      setConnections((prev) => prev.filter((conn) => conn.id !== id));\n      showMessage(\"Connection deleted successfully!\");\n    } catch (error) {\n      console.error(\"Error deleting connection:\", error);\n      showMessage(`Error deleting connection: ${error.message}`, 5000);\n    }\n  };\n\n  // Handle editing a connection (set the connection to be edited in state)\n  const handleEditConnection = (connection) => {\n    // When editing, transform the hops array back into a format expected by ConnectionForm\n    const formattedHops = connection.hops.map((hop) => ({\n      patch_panel_id: hop.patch_panel.id,\n      patch_panel_port: hop.patch_panel_port,\n      is_port_up: hop.is_port_up, // Include status for editing\n    }));\n    setEditingConnection({\n      ...connection,\n      pc_id: connection.pc.id,\n      switch_id: connection.switch.id, // Renamed from server_id\n      switch_port: connection.switch_port, // Renamed from server_port\n      is_switch_port_up: connection.is_switch_port_up, // Renamed from is_server_port_up\n      hops: formattedHops, // Set formatted hops for the form\n    });\n  };\n\n  // Function to add a new PC, Patch Panel, or Switch\n  const handleAddEntity = async (type, data) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${type}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.error || `HTTP error! status: ${response.status}`\n        );\n      }\n      const newEntity = await response.json();\n      if (type === \"pcs\") setPcs((prev) => [...prev, newEntity]);\n      if (type === \"patch_panels\")\n        setPatchPanels((prev) => [...prev, newEntity]);\n      if (type === \"switches\") setSwitches((prev) => [...prev, newEntity]); // Renamed from servers\n      showMessage(`${type.slice(0, -1).toUpperCase()} added successfully!`);\n      // Re-fetch data relevant to selection dropdowns\n      if (type === \"patch_panels\") fetchData(\"patch_panels\", setPatchPanels);\n      if (type === \"switches\") fetchData(\"switches\", setSwitches); // Renamed from servers\n      if (type === \"pcs\") fetchData(\"pcs\", setPcs);\n    } catch (error) {\n      console.error(`Error adding ${type}:`, error);\n      showMessage(`Error adding ${type}: ${error.message}`, 5000);\n    }\n  };\n\n  // Function to open the port status modal\n  const handleShowPortStatus = async (entityType, entityId) => {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/${entityType}/${entityId}/ports`\n      );\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.error || `HTTP error! status: ${response.status}`\n        );\n      }\n      const data = await response.json();\n      setPortStatusData(data);\n      setModalEntityType(entityType);\n      setModalEntityId(entityId); // Store ID for potential re-fetch if modal stays open\n      setShowPortStatusModal(true);\n    } catch (error) {\n      console.error(`Failed to fetch ${entityType} port status:`, error);\n      showMessage(`Error fetching port status: ${error.message}`, 5000);\n    }\n  };\n\n  const handleClosePortStatusModal = () => {\n    setShowPortStatusModal(false);\n    setPortStatusData(null);\n    setModalEntityType(null);\n    setModalEntityId(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-100 to-blue-200 font-inter p-4 sm:p-8\">\n      {/* Global Message Box */}\n      {isMessageVisible && (\n        <div className=\"fixed top-4 left-1/2 -translate-x-1/2 bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in-down\">\n          {message}\n        </div>\n      )}\n\n      {/* Port Status Modal */}\n      {showPortStatusModal && portStatusData && (\n        <PortStatusModal\n          isOpen={showPortStatusModal}\n          onClose={handleClosePortStatusModal}\n          data={portStatusData}\n          entityType={modalEntityType}\n          entityId={modalEntityId}\n          // Optionally, add a re-fetch mechanism if the modal supports dynamic updates\n        />\n      )}\n\n      {/* Header Section */}\n      <header className=\"mb-8 text-center\">\n        <h1 className=\"text-4xl font-extrabold text-blue-800 tracking-tight sm:text-5xl\">\n          Network Device Documentation\n        </h1>\n        <p className=\"mt-2 text-lg text-gray-600\">\n          Track your network connections from PC to Patch Panel to Switch with\n          ease.\n        </p>\n      </header>\n\n      {/* Main Content Area */}\n      <main className=\"max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-6 sm:p-8\">\n        {/* Search Bar */}\n        <div className=\"mb-8\">\n          <SearchBar searchTerm={searchTerm} onSearchChange={setSearchTerm} />\n        </div>\n\n        {/* Connection Form Section */}\n        <section className=\"mb-10 p-6 bg-blue-50 rounded-lg border border-blue-200 shadow-inner\">\n          <h2 className=\"text-2xl font-bold text-blue-700 mb-4\">\n            {editingConnection ? \"Edit Connection\" : \"Add New Connection\"}\n          </h2>\n          <ConnectionForm\n            pcs={pcs}\n            patchPanels={patchPanels}\n            switches={switches} // Renamed from servers\n            onAddConnection={handleAddConnection}\n            onUpdateConnection={handleUpdateConnection}\n            editingConnection={editingConnection}\n            setEditingConnection={setEditingConnection}\n            onAddEntity={handleAddEntity}\n            onShowPortStatus={handleShowPortStatus}\n          />\n        </section>\n\n        {/* Connection List Section */}\n        <section>\n          <h2 className=\"text-2xl font-bold text-blue-700 mb-6\">\n            All Connections\n          </h2>\n          <ConnectionList\n            connections={filteredConnections}\n            onDelete={handleDeleteConnection}\n            onEdit={handleEditConnection}\n          />\n          {filteredConnections.length === 0 && (\n            <p className=\"text-center text-gray-500 text-lg mt-8\">\n              No connections found. Start by adding one above or adjust your\n              search.\n            </p>\n          )}\n        </section>\n      </main>\n\n      {/* Footer (Optional) */}\n      <footer className=\"mt-12 text-center text-gray-500 text-sm\">\n        <p>&copy; 2025 Network Doc App. All rights reserved.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}