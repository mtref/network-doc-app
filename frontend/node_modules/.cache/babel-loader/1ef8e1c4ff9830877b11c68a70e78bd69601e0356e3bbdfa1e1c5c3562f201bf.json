{"ast":null,"code":"var _jsxFileName = \"/app/src/components/SwitchDiagramModal.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes with detailed tooltips on hover.\n\nimport React, { useState } from \"react\";\nimport { XCircle, Server, Laptop, Plug, Wifi, WifiOff, Network, Split } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs\n}) {\n  _s();\n  // State for managing the tooltip\n  const [hoveredNode, setHoveredNode] = useState(null);\n\n  // Function to handle mouse enter on a node\n  const handleNodeMouseEnter = (type, data, svgX, svgY, event) => {\n    // Get the bounding box of the SVG container to translate SVG coordinates to screen coordinates\n    const svgRect = event.currentTarget.ownerSVGElement.getBoundingClientRect();\n    const scaleX = svgRect.width / SVG_WIDTH;\n    const scaleY = svgRect.height / SVG_HEIGHT;\n\n    // Convert SVG coordinates to screen coordinates considering padding/centering\n    // Adjusting for any padding of the outer div if necessary, but svgRect already gives screen position\n    const screenX = svgRect.left + svgX * scaleX;\n    const screenY = svgRect.top + svgY * scaleY;\n    setHoveredNode({\n      type,\n      data,\n      x: screenX,\n      y: screenY\n    });\n  };\n\n  // Function to handle mouse leave from a node\n  const handleNodeMouseLeave = () => {\n    setHoveredNode(null);\n  };\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(conn => conn.switch_id === selectedSwitch.id && conn.pc);\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map(conn => {\n    const connectedPc = pcs.find(pc => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      pc: connectedPc,\n      hops: conn.hops,\n      // Array of { patch_panel: {id, name, ...}, patch_panel_port, is_port_up, sequence }\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up\n    };\n  });\n\n  // Collect unique PCs that are connected to this switch to render unique PC nodes.\n  const uniqueConnectedPcs = [];\n  const seenPcIds = new Set();\n  fullConnectionPaths.forEach(path => {\n    if (path.pc && !seenPcIds.has(path.pc.id)) {\n      uniqueConnectedPcs.push(path.pc);\n      seenPcIds.add(path.pc.id);\n    }\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900;\n  const SVG_HEIGHT = 700;\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280;\n  const NODE_SIZE = 50;\n  const HOP_NODE_SIZE = 30;\n  const numPaths = fullConnectionPaths.length;\n  const numUniquePcs = uniqueConnectedPcs.length;\n  // Angle distribution for PCs around the circle - now based on unique PCs\n  const angleStepUniquePc = numUniquePcs > 0 ? 2 * Math.PI / numUniquePcs : 0;\n\n  // Helper function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-800 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Network, {\n            size: 24,\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), \" Network Diagram:\", \" \", selectedSwitch.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\",\n          title: \"Close Diagram\",\n          children: /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative flex-grow flex items-center justify-center p-4 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: `0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`,\n          children: [fullConnectionPaths.map((path, pathIndex) => {\n            const angle = pathIndex * angleStepUniquePc; // Use pathIndex for unique position for each connection path\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n            const pcNodeCoord = {\n              x: pcX,\n              y: pcY\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            const pathElements = [];\n            pathElements.push({\n              type: \"PC\",\n              data: path.pc,\n              coords: pcNodeCoord\n            });\n            path.hops.forEach((hop, hopIndex) => {\n              const percentage = (hopIndex + 1) / (path.hops.length + 1);\n              const hopCoords = getPointOnLine(pcNodeCoord, switchNodeCoord, percentage);\n              pathElements.push({\n                type: \"PP\",\n                data: hop.patch_panel,\n                coords: hopCoords,\n                port_status: hop.is_port_up\n              });\n            });\n            pathElements.push({\n              type: \"Switch\",\n              data: path.switch,\n              coords: switchNodeCoord\n            });\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: [\" \", pathElements.map((node, i) => {\n                if (i === 0) return null;\n                const prevNode = pathElements[i - 1];\n                const strokeColor = node.type === \"Switch\" || prevNode.type === \"PP\" ? path.is_switch_port_up ? \"green\" : \"red\" : prevNode.type === \"PC\" && path.hops.length === 0 ? path.is_switch_port_up ? \"green\" : \"red\" : \"gray\";\n                const strokeDash = prevNode.type === \"PC\" && path.hops.length > 0 || node.type === \"PP\" ? \"5 5\" : \"0\";\n                return /*#__PURE__*/_jsxDEV(\"line\", {\n                  // Key by connection ID + segment index\n                  x1: prevNode.coords.x,\n                  y1: prevNode.coords.y,\n                  x2: node.coords.x,\n                  y2: node.coords.y,\n                  stroke: strokeColor,\n                  strokeWidth: \"2\",\n                  strokeDasharray: strokeDash\n                }, `line-${path.connectionId}-${i}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, `full-path-${path.connectionId}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"g\", {\n            transform: `translate(${CENTER_X}, ${CENTER_Y})`,\n            onMouseEnter: e => handleNodeMouseEnter(\"Switch\", selectedSwitch, CENTER_X, CENTER_Y, e),\n            onMouseLeave: handleNodeMouseLeave,\n            className: \"cursor-pointer\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"0\",\n              cy: \"0\",\n              r: NODE_SIZE / 2,\n              fill: \"#EF4444\",\n              stroke: \"#B91C1C\",\n              strokeWidth: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: \"5\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              fontSize: \"14\",\n              fontWeight: \"bold\",\n              children: \"Switch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: NODE_SIZE / 2 + 15,\n              textAnchor: \"middle\",\n              fill: \"black\",\n              fontSize: \"10\",\n              children: selectedSwitch.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Server, {\n              x: \"-12\",\n              y: \"-30\",\n              size: 24,\n              color: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), uniqueConnectedPcs.map((pc, index) => {\n            // Iterate over unique PCs\n            const angle = index * angleStepUniquePc; // Use index of unique PC for position\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n            // Find a connection involving this PC to get overall status for display\n            const associatedConnection = fullConnectionPaths.find(path => {\n              var _path$pc;\n              return ((_path$pc = path.pc) === null || _path$pc === void 0 ? void 0 : _path$pc.id) === pc.id;\n            });\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              // Key by unique PC ID\n              transform: `translate(${pcX}, ${pcY})`,\n              onMouseEnter: e => handleNodeMouseEnter(\"PC\", pc, pcX, pcY, e),\n              onMouseLeave: handleNodeMouseLeave,\n              className: \"cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"0\",\n                cy: \"0\",\n                r: NODE_SIZE / 2,\n                fill: \"#6366F1\",\n                stroke: \"#4F46E5\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: \"5\",\n                textAnchor: \"middle\",\n                fill: \"white\",\n                fontSize: \"12\",\n                fontWeight: \"bold\",\n                children: \"PC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: NODE_SIZE / 2 + 15,\n                textAnchor: \"middle\",\n                fill: \"black\",\n                fontSize: \"9\",\n                children: (pc === null || pc === void 0 ? void 0 : pc.name) || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Laptop, {\n                x: \"-10\",\n                y: \"-25\",\n                size: 20,\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                transform: \"translate(15, -15)\",\n                children: associatedConnection !== null && associatedConnection !== void 0 && associatedConnection.is_switch_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                  size: 16,\n                  color: \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                  size: 16,\n                  color: \"red\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 19\n              }, this)]\n            }, `pc-node-${pc.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this);\n          }), fullConnectionPaths.map((path, pathIndex) => {\n            const angle = pathIndex * angleStepUniquePc; // Use connection path index for consistent radial alignment\n            const pcNodeCoord = {\n              x: CENTER_X + PC_RADIUS * Math.cos(angle),\n              y: CENTER_Y + PC_RADIUS * Math.sin(angle)\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            // Calculate total segments based on total hops + 1 (for the segment to switch)\n            const totalSegments = path.hops.length + 1;\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: path.hops.map((hop, hopIndex) => {\n                var _hop$patch_panel, _hop$patch_panel2;\n                // Calculate percentage for this hop node\n                // We want to place the PP node in the middle of its logical segment\n                // e.g., for 1 hop: PC -- PP -- Switch (PP at 50%)\n                // e.g., for 2 hops: PC -- PP1 -- PP2 -- Switch (PP1 at 33%, PP2 at 66%)\n                const percentageForHop = (hopIndex + 0.5) / totalSegments;\n                const hopNodeX = getPointOnLine(pcNodeCoord, switchNodeCoord, percentageForHop).x;\n                const hopNodeY = getPointOnLine(pcNodeCoord, switchNodeCoord, percentageForHop).y;\n                return /*#__PURE__*/_jsxDEV(\"g\", {\n                  // Unique key for each rendered hop instance\n                  transform: `translate(${hopNodeX}, ${hopNodeY})`,\n                  onMouseEnter: e => handleNodeMouseEnter(\"PP\", hop.patch_panel, hopNodeX, hopNodeY, e),\n                  onMouseLeave: handleNodeMouseLeave,\n                  className: \"cursor-pointer\",\n                  children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                    cx: \"0\",\n                    cy: \"0\",\n                    r: HOP_NODE_SIZE / 2,\n                    fill: \"#60A5FA\",\n                    stroke: \"#3B82F6\",\n                    strokeWidth: \"1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: \"0\",\n                    y: \"5\",\n                    textAnchor: \"middle\",\n                    fill: \"white\",\n                    fontSize: \"8\",\n                    fontWeight: \"bold\",\n                    children: \"PP\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: \"0\",\n                    y: HOP_NODE_SIZE / 2 + 8,\n                    textAnchor: \"middle\",\n                    fill: \"black\",\n                    fontSize: \"7\",\n                    children: ((_hop$patch_panel2 = hop.patch_panel) === null || _hop$patch_panel2 === void 0 ? void 0 : _hop$patch_panel2.name) || `PP ${hop.patch_panel_port}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                    transform: \"translate(10, -10)\",\n                    children: hop.is_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                      size: 10,\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 391,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                      size: 10,\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 389,\n                    columnNumber: 25\n                  }, this)]\n                }, `hop-node-${(_hop$patch_panel = hop.patch_panel) === null || _hop$patch_panel === void 0 ? void 0 : _hop$patch_panel.id}-${path.connectionId}-${hopIndex}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 23\n                }, this);\n              })\n            }, `pp-nodes-${path.connectionId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), fullConnectionPaths.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"absolute text-xl text-gray-600\",\n          children: \"No PCs found connected to this switch.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), hoveredNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"fixed\",\n            left: hoveredNode.x + 15,\n            top: hoveredNode.y + 15,\n            zIndex: 100\n          },\n          className: \"bg-gray-800 text-white text-xs p-2 rounded-md shadow-lg pointer-events-none whitespace-nowrap opacity-90 animate-fade-in-down\",\n          children: [hoveredNode.type === \"Switch\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Switch:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"IP: \", hoveredNode.data.ip_address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", hoveredNode.data.location_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Model: \", hoveredNode.data.model || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Ports: \", hoveredNode.data.total_ports]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), hoveredNode.type === \"PC\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"PC:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"IP: \", hoveredNode.data.ip_address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"OS: \", hoveredNode.data.operating_system || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Office: \", hoveredNode.data.office || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Username: \", hoveredNode.data.username || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"In Domain: \", hoveredNode.data.in_domain ? \"Yes\" : \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), hoveredNode.type === \"PP\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Patch Panel:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", hoveredNode.data.location_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Rack: \", hoveredNode.data.rack_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Ports: \", hoveredNode.data.total_ports]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Plug, {\n            size: 16,\n            className: \"text-green-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), \" Port Up (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(WifiOff, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this), \" Port Down (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Server, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), \" Switch\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Laptop, {\n            size: 16,\n            className: \"text-indigo-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this), \" PC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Split, {\n            size: 16,\n            className: \"text-blue-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), \" Patch Panel\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center ml-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"black\",\n              strokeWidth: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line to Switch/PC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"gray\",\n              strokeWidth: \"2\",\n              strokeDasharray: \"5 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line between Hops\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(SwitchDiagramModal, \"7VsnSKAOhhE/SfM8No2iMpu0GrA=\");\n_c = SwitchDiagramModal;\nexport default SwitchDiagramModal;\nvar _c;\n$RefreshReg$(_c, \"SwitchDiagramModal\");","map":{"version":3,"names":["React","useState","XCircle","Server","Laptop","Plug","Wifi","WifiOff","Network","Split","jsxDEV","_jsxDEV","Fragment","_Fragment","SwitchDiagramModal","isOpen","onClose","selectedSwitch","connections","pcs","_s","hoveredNode","setHoveredNode","handleNodeMouseEnter","type","data","svgX","svgY","event","svgRect","currentTarget","ownerSVGElement","getBoundingClientRect","scaleX","width","SVG_WIDTH","scaleY","height","SVG_HEIGHT","screenX","left","screenY","top","x","y","handleNodeMouseLeave","relevantConnections","filter","conn","switch_id","id","pc","fullConnectionPaths","map","connectedPc","find","pc_id","connectionId","hops","switch","switch_port","is_switch_port_up","uniqueConnectedPcs","seenPcIds","Set","forEach","path","has","push","add","CENTER_X","CENTER_Y","PC_RADIUS","NODE_SIZE","HOP_NODE_SIZE","numPaths","length","numUniquePcs","angleStepUniquePc","Math","PI","getPointOnLine","p1","p2","percentage","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","title","viewBox","pathIndex","angle","pcX","cos","pcY","sin","pcNodeCoord","switchNodeCoord","pathElements","coords","hop","hopIndex","hopCoords","patch_panel","port_status","is_port_up","node","i","prevNode","strokeColor","strokeDash","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","transform","onMouseEnter","e","onMouseLeave","cx","cy","r","fill","textAnchor","fontSize","fontWeight","color","index","associatedConnection","_path$pc","totalSegments","_hop$patch_panel","_hop$patch_panel2","percentageForHop","hopNodeX","hopNodeY","patch_panel_port","style","position","zIndex","ip_address","location_name","model","total_ports","operating_system","office","username","in_domain","rack_name","_c","$RefreshReg$"],"sources":["/app/src/components/SwitchDiagramModal.js"],"sourcesContent":["// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes with detailed tooltips on hover.\n\nimport React, { useState } from \"react\";\nimport {\n  XCircle,\n  Server,\n  Laptop,\n  Plug,\n  Wifi,\n  WifiOff,\n  Network,\n  Split,\n} from \"lucide-react\";\n\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs,\n}) {\n  // State for managing the tooltip\n  const [hoveredNode, setHoveredNode] = useState(null);\n\n  // Function to handle mouse enter on a node\n  const handleNodeMouseEnter = (type, data, svgX, svgY, event) => {\n    // Get the bounding box of the SVG container to translate SVG coordinates to screen coordinates\n    const svgRect = event.currentTarget.ownerSVGElement.getBoundingClientRect();\n    const scaleX = svgRect.width / SVG_WIDTH;\n    const scaleY = svgRect.height / SVG_HEIGHT;\n\n    // Convert SVG coordinates to screen coordinates considering padding/centering\n    // Adjusting for any padding of the outer div if necessary, but svgRect already gives screen position\n    const screenX = svgRect.left + svgX * scaleX;\n    const screenY = svgRect.top + svgY * scaleY;\n\n    setHoveredNode({ type, data, x: screenX, y: screenY });\n  };\n\n  // Function to handle mouse leave from a node\n  const handleNodeMouseLeave = () => {\n    setHoveredNode(null);\n  };\n\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(\n    (conn) => conn.switch_id === selectedSwitch.id && conn.pc\n  );\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map((conn) => {\n    const connectedPc = pcs.find((pc) => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      pc: connectedPc,\n      hops: conn.hops, // Array of { patch_panel: {id, name, ...}, patch_panel_port, is_port_up, sequence }\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up,\n    };\n  });\n\n  // Collect unique PCs that are connected to this switch to render unique PC nodes.\n  const uniqueConnectedPcs = [];\n  const seenPcIds = new Set();\n\n  fullConnectionPaths.forEach((path) => {\n    if (path.pc && !seenPcIds.has(path.pc.id)) {\n      uniqueConnectedPcs.push(path.pc);\n      seenPcIds.add(path.pc.id);\n    }\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900;\n  const SVG_HEIGHT = 700;\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280;\n  const NODE_SIZE = 50;\n  const HOP_NODE_SIZE = 30;\n\n  const numPaths = fullConnectionPaths.length;\n  const numUniquePcs = uniqueConnectedPcs.length;\n  // Angle distribution for PCs around the circle - now based on unique PCs\n  const angleStepUniquePc = numUniquePcs > 0 ? (2 * Math.PI) / numUniquePcs : 0;\n\n  // Helper function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage,\n    };\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\">\n        {/* Modal Header */}\n        <div className=\"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\">\n          <h2 className=\"text-xl font-bold text-gray-800 flex items-center\">\n            <Network size={24} className=\"mr-2\" /> Network Diagram:{\" \"}\n            {selectedSwitch.name}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\"\n            title=\"Close Diagram\"\n          >\n            <XCircle size={24} />\n          </button>\n        </div>\n\n        {/* Diagram Area */}\n        <div className=\"relative flex-grow flex items-center justify-center p-4 bg-gray-50\">\n          <svg\n            width=\"100%\"\n            height=\"100%\"\n            viewBox={`0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`}\n          >\n            {/* Draw connections, including hops */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStepUniquePc; // Use pathIndex for unique position for each connection path\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              const pcNodeCoord = { x: pcX, y: pcY };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n\n              const pathElements = [];\n              pathElements.push({\n                type: \"PC\",\n                data: path.pc,\n                coords: pcNodeCoord,\n              });\n\n              path.hops.forEach((hop, hopIndex) => {\n                const percentage = (hopIndex + 1) / (path.hops.length + 1);\n                const hopCoords = getPointOnLine(\n                  pcNodeCoord,\n                  switchNodeCoord,\n                  percentage\n                );\n                pathElements.push({\n                  type: \"PP\",\n                  data: hop.patch_panel,\n                  coords: hopCoords,\n                  port_status: hop.is_port_up,\n                });\n              });\n\n              pathElements.push({\n                type: \"Switch\",\n                data: path.switch,\n                coords: switchNodeCoord,\n              });\n\n              return (\n                <g key={`full-path-${path.connectionId}`}>\n                  {\" \"}\n                  {/* Key by unique connection ID */}\n                  {/* Draw lines between all elements in the path */}\n                  {pathElements.map((node, i) => {\n                    if (i === 0) return null;\n\n                    const prevNode = pathElements[i - 1];\n                    const strokeColor =\n                      node.type === \"Switch\" || prevNode.type === \"PP\"\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\"\n                        : prevNode.type === \"PC\" && path.hops.length === 0\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\"\n                        : \"gray\";\n\n                    const strokeDash =\n                      (prevNode.type === \"PC\" && path.hops.length > 0) ||\n                      node.type === \"PP\"\n                        ? \"5 5\"\n                        : \"0\";\n\n                    return (\n                      <line\n                        key={`line-${path.connectionId}-${i}`} // Key by connection ID + segment index\n                        x1={prevNode.coords.x}\n                        y1={prevNode.coords.y}\n                        x2={node.coords.x}\n                        y2={node.coords.y}\n                        stroke={strokeColor}\n                        strokeWidth=\"2\"\n                        strokeDasharray={strokeDash}\n                      />\n                    );\n                  })}\n                </g>\n              );\n            })}\n\n            {/* Central Switch Node */}\n            <g\n              transform={`translate(${CENTER_X}, ${CENTER_Y})`}\n              onMouseEnter={(e) =>\n                handleNodeMouseEnter(\n                  \"Switch\",\n                  selectedSwitch,\n                  CENTER_X,\n                  CENTER_Y,\n                  e\n                )\n              }\n              onMouseLeave={handleNodeMouseLeave}\n              className=\"cursor-pointer\"\n            >\n              <circle\n                cx=\"0\"\n                cy=\"0\"\n                r={NODE_SIZE / 2}\n                fill=\"#EF4444\"\n                stroke=\"#B91C1C\"\n                strokeWidth=\"3\"\n              />\n              <text\n                x=\"0\"\n                y=\"5\"\n                textAnchor=\"middle\"\n                fill=\"white\"\n                fontSize=\"14\"\n                fontWeight=\"bold\"\n              >\n                Switch\n              </text>\n              <text\n                x=\"0\"\n                y={NODE_SIZE / 2 + 15}\n                textAnchor=\"middle\"\n                fill=\"black\"\n                fontSize=\"10\"\n              >\n                {selectedSwitch.name}\n              </text>\n              <Server x=\"-12\" y=\"-30\" size={24} color=\"white\" />\n            </g>\n\n            {/* Connected PC Nodes - Render only UNIQUE PCs */}\n            {uniqueConnectedPcs.map((pc, index) => {\n              // Iterate over unique PCs\n              const angle = index * angleStepUniquePc; // Use index of unique PC for position\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              // Find a connection involving this PC to get overall status for display\n              const associatedConnection = fullConnectionPaths.find(\n                (path) => path.pc?.id === pc.id\n              );\n\n              return (\n                <g\n                  key={`pc-node-${pc.id}`} // Key by unique PC ID\n                  transform={`translate(${pcX}, ${pcY})`}\n                  onMouseEnter={(e) =>\n                    handleNodeMouseEnter(\"PC\", pc, pcX, pcY, e)\n                  }\n                  onMouseLeave={handleNodeMouseLeave}\n                  className=\"cursor-pointer\"\n                >\n                  <circle\n                    cx=\"0\"\n                    cy=\"0\"\n                    r={NODE_SIZE / 2}\n                    fill=\"#6366F1\"\n                    stroke=\"#4F46E5\"\n                    strokeWidth=\"2\"\n                  />\n                  <text\n                    x=\"0\"\n                    y=\"5\"\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                  >\n                    PC\n                  </text>\n                  <text\n                    x=\"0\"\n                    y={NODE_SIZE / 2 + 15}\n                    textAnchor=\"middle\"\n                    fill=\"black\"\n                    fontSize=\"9\"\n                  >\n                    {pc?.name || \"N/A\"}\n                  </text>\n                  <Laptop x=\"-10\" y=\"-25\" size={20} color=\"white\" />\n                  {/* Connection Status Icon (using status from first associated connection found) */}\n                  <g transform=\"translate(15, -15)\">\n                    {associatedConnection?.is_switch_port_up ? (\n                      <Wifi size={16} color=\"green\" />\n                    ) : (\n                      <WifiOff size={16} color=\"red\" />\n                    )}\n                  </g>\n                </g>\n              );\n            })}\n\n            {/* Patch Panel Nodes (rendered separately to ensure they are on top of their lines) */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStepUniquePc; // Use connection path index for consistent radial alignment\n              const pcNodeCoord = {\n                x: CENTER_X + PC_RADIUS * Math.cos(angle),\n                y: CENTER_Y + PC_RADIUS * Math.sin(angle),\n              };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n              // Calculate total segments based on total hops + 1 (for the segment to switch)\n              const totalSegments = path.hops.length + 1;\n\n              return (\n                <React.Fragment key={`pp-nodes-${path.connectionId}`}>\n                  {path.hops.map((hop, hopIndex) => {\n                    // Calculate percentage for this hop node\n                    // We want to place the PP node in the middle of its logical segment\n                    // e.g., for 1 hop: PC -- PP -- Switch (PP at 50%)\n                    // e.g., for 2 hops: PC -- PP1 -- PP2 -- Switch (PP1 at 33%, PP2 at 66%)\n                    const percentageForHop = (hopIndex + 0.5) / totalSegments;\n\n                    const hopNodeX = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      percentageForHop\n                    ).x;\n                    const hopNodeY = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      percentageForHop\n                    ).y;\n\n                    return (\n                      <g\n                        key={`hop-node-${hop.patch_panel?.id}-${path.connectionId}-${hopIndex}`} // Unique key for each rendered hop instance\n                        transform={`translate(${hopNodeX}, ${hopNodeY})`}\n                        onMouseEnter={(e) =>\n                          handleNodeMouseEnter(\n                            \"PP\",\n                            hop.patch_panel,\n                            hopNodeX,\n                            hopNodeY,\n                            e\n                          )\n                        }\n                        onMouseLeave={handleNodeMouseLeave}\n                        className=\"cursor-pointer\"\n                      >\n                        <circle\n                          cx=\"0\"\n                          cy=\"0\"\n                          r={HOP_NODE_SIZE / 2}\n                          fill=\"#60A5FA\"\n                          stroke=\"#3B82F6\"\n                          strokeWidth=\"1\"\n                        />\n                        <text\n                          x=\"0\"\n                          y=\"5\"\n                          textAnchor=\"middle\"\n                          fill=\"white\"\n                          fontSize=\"8\"\n                          fontWeight=\"bold\"\n                        >\n                          PP\n                        </text>\n                        <text\n                          x=\"0\"\n                          y={HOP_NODE_SIZE / 2 + 8}\n                          textAnchor=\"middle\"\n                          fill=\"black\"\n                          fontSize=\"7\"\n                        >\n                          {hop.patch_panel?.name ||\n                            `PP ${hop.patch_panel_port}`}\n                        </text>\n                        {/* Port Status on Patch Panel */}\n                        <g transform=\"translate(10, -10)\">\n                          {hop.is_port_up ? (\n                            <Wifi size={10} color=\"green\" />\n                          ) : (\n                            <WifiOff size={10} color=\"red\" />\n                          )}\n                        </g>\n                      </g>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n          </svg>\n          {fullConnectionPaths.length === 0 && (\n            <p className=\"absolute text-xl text-gray-600\">\n              No PCs found connected to this switch.\n            </p>\n          )}\n\n          {/* Floating Tooltip */}\n          {hoveredNode && (\n            <div\n              style={{\n                position: \"fixed\",\n                left: hoveredNode.x + 15,\n                top: hoveredNode.y + 15,\n                zIndex: 100,\n              }}\n              className=\"bg-gray-800 text-white text-xs p-2 rounded-md shadow-lg pointer-events-none whitespace-nowrap opacity-90 animate-fade-in-down\"\n            >\n              {hoveredNode.type === \"Switch\" && (\n                <>\n                  <p>\n                    <strong>Switch:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>IP: {hoveredNode.data.ip_address || \"N/A\"}</p>\n                  <p>Location: {hoveredNode.data.location_name || \"N/A\"}</p>\n                  <p>Model: {hoveredNode.data.model || \"N/A\"}</p>\n                  <p>Total Ports: {hoveredNode.data.total_ports}</p>\n                </>\n              )}\n              {hoveredNode.type === \"PC\" && (\n                <>\n                  <p>\n                    <strong>PC:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>IP: {hoveredNode.data.ip_address || \"N/A\"}</p>\n                  <p>OS: {hoveredNode.data.operating_system || \"N/A\"}</p>\n                  <p>Office: {hoveredNode.data.office || \"N/A\"}</p>\n                  <p>Username: {hoveredNode.data.username || \"N/A\"}</p>\n                  <p>In Domain: {hoveredNode.data.in_domain ? \"Yes\" : \"No\"}</p>\n                </>\n              )}\n              {hoveredNode.type === \"PP\" && (\n                <>\n                  <p>\n                    <strong>Patch Panel:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>Location: {hoveredNode.data.location_name || \"N/A\"}</p>\n                  <p>Rack: {hoveredNode.data.rack_name || \"N/A\"}</p>\n                  <p>Total Ports: {hoveredNode.data.total_ports}</p>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Footer for status legend */}\n        <div className=\"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\">\n          <div className=\"flex items-center\">\n            <Plug size={16} className=\"text-green-500 mr-1\" /> Port Up (Overall\n            Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <WifiOff size={16} className=\"text-red-500 mr-1\" /> Port Down\n            (Overall Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <Server size={16} className=\"text-red-500 mr-1\" /> Switch\n          </div>\n          <div className=\"flex items-center\">\n            <Laptop size={16} className=\"text-indigo-500 mr-1\" /> PC\n          </div>\n          <div className=\"flex items-center\">\n            <Split size={16} className=\"text-blue-500 mr-1\" /> Patch Panel\n          </div>\n          <div className=\"flex items-center ml-4\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"black\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line to Switch/PC</span>\n          </div>\n          <div className=\"flex items-center\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"gray\"\n                strokeWidth=\"2\"\n                strokeDasharray=\"5 5\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line between Hops</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SwitchDiagramModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}