{"ast":null,"code":"var _jsxFileName = \"/app/src/components/SwitchDiagramModal.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes with detailed tooltips on hover.\n\nimport React, { useState } from \"react\";\nimport { XCircle, Server, Laptop, Plug, Wifi, WifiOff, Network, Split } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs\n}) {\n  _s();\n  // State for managing the tooltip - MUST be called unconditionally at the top level\n  const [hoveredNode, setHoveredNode] = useState(null); // Moved here\n\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(conn => conn.switch_id === selectedSwitch.id && conn.pc);\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map(conn => {\n    const connectedPc = pcs.find(pc => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      pc: connectedPc,\n      hops: conn.hops,\n      // Array of { patch_panel: {id, name, ...}, patch_panel_port, is_port_up, sequence }\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up\n    };\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900; // Increased width for more space\n  const SVG_HEIGHT = 700; // Increased height\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280; // Radius for placing PC nodes in the outer circle\n  const NODE_SIZE = 50; // Base size for PC/Switch circles\n  const HOP_NODE_SIZE = 30; // Smaller size for hop nodes\n\n  const numPaths = fullConnectionPaths.length;\n  const angleStep = numPaths > 0 ? 2 * Math.PI / numPaths : 0;\n\n  // Helper function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage\n    };\n  };\n\n  // Function to handle mouse enter on a node\n  const handleNodeMouseEnter = (type, data, svgX, svgY, event) => {\n    // Get the bounding box of the SVG container to translate SVG coordinates to screen coordinates\n    const svgRect = event.currentTarget.ownerSVGElement.getBoundingClientRect();\n    const scaleX = svgRect.width / SVG_WIDTH;\n    const scaleY = svgRect.height / SVG_HEIGHT;\n\n    // Convert SVG coordinates to screen coordinates considering padding/centering\n    const screenX = svgRect.left + svgX * scaleX;\n    const screenY = svgRect.top + svgY * scaleY;\n    setHoveredNode({\n      type,\n      data,\n      x: screenX,\n      y: screenY\n    });\n  };\n\n  // Function to handle mouse leave from a node\n  const handleNodeMouseLeave = () => {\n    setHoveredNode(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-800 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Network, {\n            size: 24,\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), \" Network Diagram:\", \" \", selectedSwitch.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\",\n          title: \"Close Diagram\",\n          children: /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative flex-grow flex items-center justify-center p-4 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: `0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`,\n          children: [fullConnectionPaths.map((path, pathIndex) => {\n            const angle = pathIndex * angleStep;\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n            const pcNodeCoord = {\n              x: pcX,\n              y: pcY\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            const pathElements = [];\n            pathElements.push({\n              type: \"PC\",\n              data: path.pc,\n              coords: pcNodeCoord\n            });\n            path.hops.forEach((hop, hopIndex) => {\n              const percentage = (hopIndex + 1) / (path.hops.length + 1);\n              const hopCoords = getPointOnLine(pcNodeCoord, switchNodeCoord, percentage);\n              pathElements.push({\n                type: \"PP\",\n                data: hop.patch_panel,\n                coords: hopCoords,\n                port_status: hop.is_port_up\n              });\n            });\n            pathElements.push({\n              type: \"Switch\",\n              data: path.switch,\n              coords: switchNodeCoord\n            });\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: pathElements.map((node, i) => {\n                if (i === 0) return null;\n                const prevNode = pathElements[i - 1];\n                const strokeColor = node.type === \"Switch\" || prevNode.type === \"PP\" ? path.is_switch_port_up ? \"green\" : \"red\" : prevNode.type === \"PC\" && path.hops.length === 0 ? path.is_switch_port_up ? \"green\" : \"red\" : \"gray\";\n                const strokeDash = prevNode.type === \"PC\" && path.hops.length > 0 || node.type === \"PP\" ? \"5 5\" : \"0\";\n                return /*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: prevNode.coords.x,\n                  y1: prevNode.coords.y,\n                  x2: node.coords.x,\n                  y2: node.coords.y,\n                  stroke: strokeColor,\n                  strokeWidth: \"2\",\n                  strokeDasharray: strokeDash\n                }, `line-${path.connectionId}-${i}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 23\n                }, this);\n              })\n            }, `full-path-${path.connectionId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"g\", {\n            transform: `translate(${CENTER_X}, ${CENTER_Y})`,\n            onMouseEnter: e => handleNodeMouseEnter(\"Switch\", selectedSwitch, CENTER_X, CENTER_Y, e),\n            onMouseLeave: handleNodeMouseLeave,\n            className: \"cursor-pointer\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"0\",\n              cy: \"0\",\n              r: NODE_SIZE / 2,\n              fill: \"#EF4444\",\n              stroke: \"#B91C1C\",\n              strokeWidth: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: \"5\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              fontSize: \"14\",\n              fontWeight: \"bold\",\n              children: \"Switch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: NODE_SIZE / 2 + 15,\n              textAnchor: \"middle\",\n              fill: \"black\",\n              fontSize: \"10\",\n              children: selectedSwitch.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Server, {\n              x: \"-12\",\n              y: \"-30\",\n              size: 24,\n              color: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), fullConnectionPaths.map((path, pathIndex) => {\n            var _path$pc;\n            const angle = pathIndex * angleStep;\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              transform: `translate(${pcX}, ${pcY})`,\n              onMouseEnter: e => handleNodeMouseEnter(\"PC\", path.pc, pcX, pcY, e),\n              onMouseLeave: handleNodeMouseLeave,\n              className: \"cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"0\",\n                cy: \"0\",\n                r: NODE_SIZE / 2,\n                fill: \"#6366F1\",\n                stroke: \"#4F46E5\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: \"5\",\n                textAnchor: \"middle\",\n                fill: \"white\",\n                fontSize: \"12\",\n                fontWeight: \"bold\",\n                children: \"PC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: NODE_SIZE / 2 + 15,\n                textAnchor: \"middle\",\n                fill: \"black\",\n                fontSize: \"9\",\n                children: ((_path$pc = path.pc) === null || _path$pc === void 0 ? void 0 : _path$pc.name) || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Laptop, {\n                x: \"-10\",\n                y: \"-25\",\n                size: 20,\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                transform: \"translate(15, -15)\",\n                children: path.is_switch_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                  size: 16,\n                  color: \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                  size: 16,\n                  color: \"red\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this)]\n            }, `pc-node-${path.pc.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this);\n          }), fullConnectionPaths.map((path, pathIndex) => {\n            const angle = pathIndex * angleStep;\n            const pcNodeCoord = {\n              x: CENTER_X + PC_RADIUS * Math.cos(angle),\n              y: CENTER_Y + PC_RADIUS * Math.sin(angle)\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            const segmentPercentage = 1 / (path.hops.length + 1);\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: path.hops.map((hop, hopIndex) => {\n                var _hop$patch_panel, _hop$patch_panel2;\n                const prevPoint = getPointOnLine(pcNodeCoord, switchNodeCoord, hopIndex * segmentPercentage);\n                const nextPoint = getPointOnLine(pcNodeCoord, switchNodeCoord, (hopIndex + 1) * segmentPercentage);\n                const hopNodeX = (prevPoint.x + nextPoint.x) / 2;\n                const hopNodeY = (prevPoint.y + nextPoint.y) / 2;\n                return /*#__PURE__*/_jsxDEV(\"g\", {\n                  // Added hopIndex to key for uniqueness\n                  transform: `translate(${hopNodeX}, ${hopNodeY})`,\n                  onMouseEnter: e => handleNodeMouseEnter(\"PP\", hop.patch_panel, hopNodeX, hopNodeY, e),\n                  onMouseLeave: handleNodeMouseLeave,\n                  className: \"cursor-pointer\",\n                  children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                    cx: \"0\",\n                    cy: \"0\",\n                    r: HOP_NODE_SIZE / 2,\n                    fill: \"#60A5FA\",\n                    stroke: \"#3B82F6\",\n                    strokeWidth: \"1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: \"0\",\n                    y: \"5\",\n                    textAnchor: \"middle\",\n                    fill: \"white\",\n                    fontSize: \"8\",\n                    fontWeight: \"bold\",\n                    children: \"PP\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 341,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: \"0\",\n                    y: HOP_NODE_SIZE / 2 + 8,\n                    textAnchor: \"middle\",\n                    fill: \"black\",\n                    fontSize: \"7\",\n                    children: ((_hop$patch_panel2 = hop.patch_panel) === null || _hop$patch_panel2 === void 0 ? void 0 : _hop$patch_panel2.name) || `PP ${hop.patch_panel_port}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                    transform: \"translate(10, -10)\",\n                    children: hop.is_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                      size: 10,\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 364,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                      size: 10,\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 366,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 362,\n                    columnNumber: 25\n                  }, this)]\n                }, `hop-node-${(_hop$patch_panel = hop.patch_panel) === null || _hop$patch_panel === void 0 ? void 0 : _hop$patch_panel.id}-${path.connectionId}-${hopIndex}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 23\n                }, this);\n              })\n            }, `pp-nodes-${path.connectionId}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), fullConnectionPaths.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"absolute text-xl text-gray-600\",\n          children: \"No PCs found connected to this switch.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this), hoveredNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"fixed\",\n            // Use 'fixed' to position relative to viewport\n            left: hoveredNode.x + 15,\n            // Offset from cursor\n            top: hoveredNode.y + 15,\n            // Offset from cursor\n            zIndex: 100\n          },\n          className: \"bg-gray-800 text-white text-xs p-2 rounded-md shadow-lg pointer-events-none whitespace-nowrap opacity-90 animate-fade-in-down\",\n          children: [hoveredNode.type === \"Switch\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Switch:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"IP: \", hoveredNode.data.ip_address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", hoveredNode.data.location_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Model: \", hoveredNode.data.model || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Ports: \", hoveredNode.data.total_ports]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), hoveredNode.type === \"PC\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"PC:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"IP: \", hoveredNode.data.ip_address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"OS: \", hoveredNode.data.operating_system || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Office: \", hoveredNode.data.office || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Username: \", hoveredNode.data.username || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"In Domain: \", hoveredNode.data.in_domain ? \"Yes\" : \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), hoveredNode.type === \"PP\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Patch Panel:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", hoveredNode.data.location_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Rack: \", hoveredNode.data.rack_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Ports: \", hoveredNode.data.total_ports]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Plug, {\n            size: 16,\n            className: \"text-green-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), \" Port Up (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(WifiOff, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this), \" Port Down (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Server, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this), \" Switch\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Laptop, {\n            size: 16,\n            className: \"text-indigo-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), \" PC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Split, {\n            size: 16,\n            className: \"text-blue-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), \" Patch Panel\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center ml-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"black\",\n              strokeWidth: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line to Switch/PC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"gray\",\n              strokeWidth: \"2\",\n              strokeDasharray: \"5 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line between Hops\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(SwitchDiagramModal, \"7VsnSKAOhhE/SfM8No2iMpu0GrA=\");\n_c = SwitchDiagramModal;\nexport default SwitchDiagramModal;\nvar _c;\n$RefreshReg$(_c, \"SwitchDiagramModal\");","map":{"version":3,"names":["React","useState","XCircle","Server","Laptop","Plug","Wifi","WifiOff","Network","Split","jsxDEV","_jsxDEV","Fragment","_Fragment","SwitchDiagramModal","isOpen","onClose","selectedSwitch","connections","pcs","_s","hoveredNode","setHoveredNode","relevantConnections","filter","conn","switch_id","id","pc","fullConnectionPaths","map","connectedPc","find","pc_id","connectionId","hops","switch","switch_port","is_switch_port_up","SVG_WIDTH","SVG_HEIGHT","CENTER_X","CENTER_Y","PC_RADIUS","NODE_SIZE","HOP_NODE_SIZE","numPaths","length","angleStep","Math","PI","getPointOnLine","p1","p2","percentage","x","y","handleNodeMouseEnter","type","data","svgX","svgY","event","svgRect","currentTarget","ownerSVGElement","getBoundingClientRect","scaleX","width","scaleY","height","screenX","left","screenY","top","handleNodeMouseLeave","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","title","viewBox","path","pathIndex","angle","pcX","cos","pcY","sin","pcNodeCoord","switchNodeCoord","pathElements","push","coords","forEach","hop","hopIndex","hopCoords","patch_panel","port_status","is_port_up","node","i","prevNode","strokeColor","strokeDash","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","transform","onMouseEnter","e","onMouseLeave","cx","cy","r","fill","textAnchor","fontSize","fontWeight","color","_path$pc","segmentPercentage","_hop$patch_panel","_hop$patch_panel2","prevPoint","nextPoint","hopNodeX","hopNodeY","patch_panel_port","style","position","zIndex","ip_address","location_name","model","total_ports","operating_system","office","username","in_domain","rack_name","_c","$RefreshReg$"],"sources":["/app/src/components/SwitchDiagramModal.js"],"sourcesContent":["// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes with detailed tooltips on hover.\n\nimport React, { useState } from \"react\";\nimport {\n  XCircle,\n  Server,\n  Laptop,\n  Plug,\n  Wifi,\n  WifiOff,\n  Network,\n  Split,\n} from \"lucide-react\";\n\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs,\n}) {\n  // State for managing the tooltip - MUST be called unconditionally at the top level\n  const [hoveredNode, setHoveredNode] = useState(null); // Moved here\n\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(\n    (conn) => conn.switch_id === selectedSwitch.id && conn.pc\n  );\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map((conn) => {\n    const connectedPc = pcs.find((pc) => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      pc: connectedPc,\n      hops: conn.hops, // Array of { patch_panel: {id, name, ...}, patch_panel_port, is_port_up, sequence }\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up,\n    };\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900; // Increased width for more space\n  const SVG_HEIGHT = 700; // Increased height\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280; // Radius for placing PC nodes in the outer circle\n  const NODE_SIZE = 50; // Base size for PC/Switch circles\n  const HOP_NODE_SIZE = 30; // Smaller size for hop nodes\n\n  const numPaths = fullConnectionPaths.length;\n  const angleStep = numPaths > 0 ? (2 * Math.PI) / numPaths : 0;\n\n  // Helper function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage,\n    };\n  };\n\n  // Function to handle mouse enter on a node\n  const handleNodeMouseEnter = (type, data, svgX, svgY, event) => {\n    // Get the bounding box of the SVG container to translate SVG coordinates to screen coordinates\n    const svgRect = event.currentTarget.ownerSVGElement.getBoundingClientRect();\n    const scaleX = svgRect.width / SVG_WIDTH;\n    const scaleY = svgRect.height / SVG_HEIGHT;\n\n    // Convert SVG coordinates to screen coordinates considering padding/centering\n    const screenX = svgRect.left + svgX * scaleX;\n    const screenY = svgRect.top + svgY * scaleY;\n\n    setHoveredNode({ type, data, x: screenX, y: screenY });\n  };\n\n  // Function to handle mouse leave from a node\n  const handleNodeMouseLeave = () => {\n    setHoveredNode(null);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\">\n        {/* Modal Header */}\n        <div className=\"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\">\n          <h2 className=\"text-xl font-bold text-gray-800 flex items-center\">\n            <Network size={24} className=\"mr-2\" /> Network Diagram:{\" \"}\n            {selectedSwitch.name}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\"\n            title=\"Close Diagram\"\n          >\n            <XCircle size={24} />\n          </button>\n        </div>\n\n        {/* Diagram Area */}\n        <div className=\"relative flex-grow flex items-center justify-center p-4 bg-gray-50\">\n          <svg\n            width=\"100%\"\n            height=\"100%\"\n            viewBox={`0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`}\n          >\n            {/* Draw connections, including hops */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStep;\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              const pcNodeCoord = { x: pcX, y: pcY };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n\n              const pathElements = [];\n              pathElements.push({\n                type: \"PC\",\n                data: path.pc,\n                coords: pcNodeCoord,\n              });\n\n              path.hops.forEach((hop, hopIndex) => {\n                const percentage = (hopIndex + 1) / (path.hops.length + 1);\n                const hopCoords = getPointOnLine(\n                  pcNodeCoord,\n                  switchNodeCoord,\n                  percentage\n                );\n                pathElements.push({\n                  type: \"PP\",\n                  data: hop.patch_panel,\n                  coords: hopCoords,\n                  port_status: hop.is_port_up,\n                });\n              });\n\n              pathElements.push({\n                type: \"Switch\",\n                data: path.switch,\n                coords: switchNodeCoord,\n              });\n\n              return (\n                <g key={`full-path-${path.connectionId}`}>\n                  {/* Draw lines between all elements in the path */}\n                  {pathElements.map((node, i) => {\n                    if (i === 0) return null;\n\n                    const prevNode = pathElements[i - 1];\n                    const strokeColor =\n                      node.type === \"Switch\" || prevNode.type === \"PP\"\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\"\n                        : prevNode.type === \"PC\" && path.hops.length === 0\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\"\n                        : \"gray\";\n\n                    const strokeDash =\n                      (prevNode.type === \"PC\" && path.hops.length > 0) ||\n                      node.type === \"PP\"\n                        ? \"5 5\"\n                        : \"0\";\n\n                    return (\n                      <line\n                        key={`line-${path.connectionId}-${i}`}\n                        x1={prevNode.coords.x}\n                        y1={prevNode.coords.y}\n                        x2={node.coords.x}\n                        y2={node.coords.y}\n                        stroke={strokeColor}\n                        strokeWidth=\"2\"\n                        strokeDasharray={strokeDash}\n                      />\n                    );\n                  })}\n                </g>\n              );\n            })}\n\n            {/* Central Switch Node */}\n            <g\n              transform={`translate(${CENTER_X}, ${CENTER_Y})`}\n              onMouseEnter={(e) =>\n                handleNodeMouseEnter(\n                  \"Switch\",\n                  selectedSwitch,\n                  CENTER_X,\n                  CENTER_Y,\n                  e\n                )\n              }\n              onMouseLeave={handleNodeMouseLeave}\n              className=\"cursor-pointer\"\n            >\n              <circle\n                cx=\"0\"\n                cy=\"0\"\n                r={NODE_SIZE / 2}\n                fill=\"#EF4444\"\n                stroke=\"#B91C1C\"\n                strokeWidth=\"3\"\n              />\n              <text\n                x=\"0\"\n                y=\"5\"\n                textAnchor=\"middle\"\n                fill=\"white\"\n                fontSize=\"14\"\n                fontWeight=\"bold\"\n              >\n                Switch\n              </text>\n              <text\n                x=\"0\"\n                y={NODE_SIZE / 2 + 15}\n                textAnchor=\"middle\"\n                fill=\"black\"\n                fontSize=\"10\"\n              >\n                {selectedSwitch.name}\n              </text>\n              <Server x=\"-12\" y=\"-30\" size={24} color=\"white\" />\n            </g>\n\n            {/* Connected PC Nodes */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStep;\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              return (\n                <g\n                  key={`pc-node-${path.pc.id}`}\n                  transform={`translate(${pcX}, ${pcY})`}\n                  onMouseEnter={(e) =>\n                    handleNodeMouseEnter(\"PC\", path.pc, pcX, pcY, e)\n                  }\n                  onMouseLeave={handleNodeMouseLeave}\n                  className=\"cursor-pointer\"\n                >\n                  <circle\n                    cx=\"0\"\n                    cy=\"0\"\n                    r={NODE_SIZE / 2}\n                    fill=\"#6366F1\"\n                    stroke=\"#4F46E5\"\n                    strokeWidth=\"2\"\n                  />\n                  <text\n                    x=\"0\"\n                    y=\"5\"\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                  >\n                    PC\n                  </text>\n                  <text\n                    x=\"0\"\n                    y={NODE_SIZE / 2 + 15}\n                    textAnchor=\"middle\"\n                    fill=\"black\"\n                    fontSize=\"9\"\n                  >\n                    {path.pc?.name || \"N/A\"}\n                  </text>\n                  <Laptop x=\"-10\" y=\"-25\" size={20} color=\"white\" />\n                  {/* Connection Status Icon */}\n                  <g transform=\"translate(15, -15)\">\n                    {path.is_switch_port_up ? (\n                      <Wifi size={16} color=\"green\" />\n                    ) : (\n                      <WifiOff size={16} color=\"red\" />\n                    )}\n                  </g>\n                </g>\n              );\n            })}\n\n            {/* Patch Panel Nodes (rendered separately to ensure they are on top of their lines) */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              const angle = pathIndex * angleStep;\n              const pcNodeCoord = {\n                x: CENTER_X + PC_RADIUS * Math.cos(angle),\n                y: CENTER_Y + PC_RADIUS * Math.sin(angle),\n              };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n              const segmentPercentage = 1 / (path.hops.length + 1);\n\n              return (\n                <React.Fragment key={`pp-nodes-${path.connectionId}`}>\n                  {path.hops.map((hop, hopIndex) => {\n                    const prevPoint = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      hopIndex * segmentPercentage\n                    );\n                    const nextPoint = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      (hopIndex + 1) * segmentPercentage\n                    );\n                    const hopNodeX = (prevPoint.x + nextPoint.x) / 2;\n                    const hopNodeY = (prevPoint.y + nextPoint.y) / 2;\n\n                    return (\n                      <g\n                        key={`hop-node-${hop.patch_panel?.id}-${path.connectionId}-${hopIndex}`} // Added hopIndex to key for uniqueness\n                        transform={`translate(${hopNodeX}, ${hopNodeY})`}\n                        onMouseEnter={(e) =>\n                          handleNodeMouseEnter(\n                            \"PP\",\n                            hop.patch_panel,\n                            hopNodeX,\n                            hopNodeY,\n                            e\n                          )\n                        }\n                        onMouseLeave={handleNodeMouseLeave}\n                        className=\"cursor-pointer\"\n                      >\n                        <circle\n                          cx=\"0\"\n                          cy=\"0\"\n                          r={HOP_NODE_SIZE / 2}\n                          fill=\"#60A5FA\"\n                          stroke=\"#3B82F6\"\n                          strokeWidth=\"1\"\n                        />\n                        <text\n                          x=\"0\"\n                          y=\"5\"\n                          textAnchor=\"middle\"\n                          fill=\"white\"\n                          fontSize=\"8\"\n                          fontWeight=\"bold\"\n                        >\n                          PP\n                        </text>\n                        <text\n                          x=\"0\"\n                          y={HOP_NODE_SIZE / 2 + 8}\n                          textAnchor=\"middle\"\n                          fill=\"black\"\n                          fontSize=\"7\"\n                        >\n                          {hop.patch_panel?.name ||\n                            `PP ${hop.patch_panel_port}`}\n                        </text>\n                        {/* Port Status on Patch Panel */}\n                        <g transform=\"translate(10, -10)\">\n                          {hop.is_port_up ? (\n                            <Wifi size={10} color=\"green\" />\n                          ) : (\n                            <WifiOff size={10} color=\"red\" />\n                          )}\n                        </g>\n                      </g>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n          </svg>\n          {fullConnectionPaths.length === 0 && (\n            <p className=\"absolute text-xl text-gray-600\">\n              No PCs found connected to this switch.\n            </p>\n          )}\n\n          {/* Floating Tooltip */}\n          {hoveredNode && (\n            <div\n              style={{\n                position: \"fixed\", // Use 'fixed' to position relative to viewport\n                left: hoveredNode.x + 15, // Offset from cursor\n                top: hoveredNode.y + 15, // Offset from cursor\n                zIndex: 100,\n              }}\n              className=\"bg-gray-800 text-white text-xs p-2 rounded-md shadow-lg pointer-events-none whitespace-nowrap opacity-90 animate-fade-in-down\"\n            >\n              {hoveredNode.type === \"Switch\" && (\n                <>\n                  <p>\n                    <strong>Switch:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>IP: {hoveredNode.data.ip_address || \"N/A\"}</p>\n                  <p>Location: {hoveredNode.data.location_name || \"N/A\"}</p>\n                  <p>Model: {hoveredNode.data.model || \"N/A\"}</p>\n                  <p>Total Ports: {hoveredNode.data.total_ports}</p>\n                </>\n              )}\n              {hoveredNode.type === \"PC\" && (\n                <>\n                  <p>\n                    <strong>PC:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>IP: {hoveredNode.data.ip_address || \"N/A\"}</p>\n                  <p>OS: {hoveredNode.data.operating_system || \"N/A\"}</p>\n                  <p>Office: {hoveredNode.data.office || \"N/A\"}</p>\n                  <p>Username: {hoveredNode.data.username || \"N/A\"}</p>\n                  <p>In Domain: {hoveredNode.data.in_domain ? \"Yes\" : \"No\"}</p>\n                </>\n              )}\n              {hoveredNode.type === \"PP\" && (\n                <>\n                  <p>\n                    <strong>Patch Panel:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>Location: {hoveredNode.data.location_name || \"N/A\"}</p>\n                  <p>Rack: {hoveredNode.data.rack_name || \"N/A\"}</p>\n                  <p>Total Ports: {hoveredNode.data.total_ports}</p>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Footer for status legend */}\n        <div className=\"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\">\n          <div className=\"flex items-center\">\n            <Plug size={16} className=\"text-green-500 mr-1\" /> Port Up (Overall\n            Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <WifiOff size={16} className=\"text-red-500 mr-1\" /> Port Down\n            (Overall Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <Server size={16} className=\"text-red-500 mr-1\" /> Switch\n          </div>\n          <div className=\"flex items-center\">\n            <Laptop size={16} className=\"text-indigo-500 mr-1\" /> PC\n          </div>\n          <div className=\"flex items-center\">\n            <Split size={16} className=\"text-blue-500 mr-1\" /> Patch Panel\n          </div>\n          <div className=\"flex items-center ml-4\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"black\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line to Switch/PC</span>\n          </div>\n          <div className=\"flex items-center\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"gray\"\n                strokeWidth=\"2\"\n                strokeDasharray=\"5 5\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line between Hops</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SwitchDiagramModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}