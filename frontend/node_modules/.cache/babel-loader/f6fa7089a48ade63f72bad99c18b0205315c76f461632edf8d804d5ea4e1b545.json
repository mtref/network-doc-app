{"ast":null,"code":"var _jsxFileName = \"/app/src/components/SwitchDiagramModal.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes with detailed tooltips on hover.\n\nimport React, { useState } from \"react\";\nimport { XCircle, Server, Laptop, Plug, Wifi, WifiOff, Network, Split } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs\n}) {\n  _s();\n  // State for managing the tooltip - MUST be called unconditionally at the top level\n  const [hoveredNode, setHoveredNode] = useState(null);\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(conn => conn.switch_id === selectedSwitch.id && conn.pc);\n\n  // Collect unique PCs that are connected to this switch to render unique PC nodes.\n  // Use a Set to track PC IDs already added, to ensure each PC node is rendered only once\n  // even if it has multiple connections to the same switch.\n  const uniqueConnectedPcs = [];\n  const seenPcIds = new Set();\n  fullConnectionPaths.forEach(path => {\n    if (path.pc && !seenPcIds.has(path.pc.id)) {\n      uniqueConnectedPcs.push(path.pc);\n      seenPcIds.add(path.pc.id);\n    }\n  });\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map(conn => {\n    const connectedPc = pcs.find(pc => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id,\n      // This is already unique per connection\n      pc: connectedPc,\n      hops: conn.hops,\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up\n    };\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900;\n  const SVG_HEIGHT = 700;\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280;\n  const NODE_SIZE = 50;\n  const HOP_NODE_SIZE = 30;\n  const numPaths = fullConnectionPaths.length; // Number of distinct connections\n  const numUniquePcs = uniqueConnectedPcs.length; // Number of unique PCs to display\n  // Angle distribution for PCs around the circle - now based on unique PCs\n  const angleStepUniquePc = numUniquePcs > 0 ? 2 * Math.PI / numUniquePcs : 0;\n\n  // Function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-800 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Network, {\n            size: 24,\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), \" Network Diagram:\", \" \", selectedSwitch.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\",\n          title: \"Close Diagram\",\n          children: /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative flex-grow flex items-center justify-center p-4 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: `0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`,\n          children: [fullConnectionPaths.map((path, pathIndex) => {\n            // Instead of distributing all connections, we need to map unique PCs\n            // For now, keep the pathIndex for drawing multiple distinct lines\n            // A more advanced solution would draw a line between unique PC and PP/Switch nodes\n            // For now, the PC position is still based on `pathIndex`\n\n            const angle = pathIndex * angleStepUniquePc; // Use pathIndex for unique position for each connection path\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n            const pcNodeCoord = {\n              x: pcX,\n              y: pcY\n            };\n            const switchNodeCoord = {\n              x: CENTER_X,\n              y: CENTER_Y\n            };\n            const pathElements = [];\n            pathElements.push({\n              type: \"PC\",\n              data: path.pc,\n              coords: pcNodeCoord\n            });\n            path.hops.forEach((hop, hopIndex) => {\n              const percentage = (hopIndex + 1) / (path.hops.length + 1);\n              const hopCoords = getPointOnLine(pcNodeCoord, switchNodeCoord, percentage);\n              pathElements.push({\n                type: \"PP\",\n                data: hop.patch_panel,\n                coords: hopCoords,\n                port_status: hop.is_port_up\n              });\n            });\n            pathElements.push({\n              type: \"Switch\",\n              data: path.switch,\n              coords: switchNodeCoord\n            });\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: [\" \", pathElements.map((node, i) => {\n                if (i === 0) return null;\n                const prevNode = pathElements[i - 1];\n                const strokeColor = node.type === \"Switch\" || prevNode.type === \"PP\" ? path.is_switch_port_up ? \"green\" : \"red\" : prevNode.type === \"PC\" && path.hops.length === 0 ? path.is_switch_port_up ? \"green\" : \"red\" : \"gray\";\n                const strokeDash = prevNode.type === \"PC\" && path.hops.length > 0 || node.type === \"PP\" ? \"5 5\" : \"0\";\n                return /*#__PURE__*/_jsxDEV(\"line\", {\n                  // Key by connection ID + segment index\n                  x1: prevNode.coords.x,\n                  y1: prevNode.coords.y,\n                  x2: node.coords.x,\n                  y2: node.coords.y,\n                  stroke: strokeColor,\n                  strokeWidth: \"2\",\n                  strokeDasharray: strokeDash\n                }, `line-${path.connectionId}-${i}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, `full-path-${path.connectionId}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"g\", {\n            transform: `translate(${CENTER_X}, ${CENTER_Y})`,\n            onMouseEnter: e => handleNodeMouseEnter(\"Switch\", selectedSwitch, CENTER_X, CENTER_Y, e),\n            onMouseLeave: handleNodeMouseLeave,\n            className: \"cursor-pointer\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"0\",\n              cy: \"0\",\n              r: NODE_SIZE / 2,\n              fill: \"#EF4444\",\n              stroke: \"#B91C1C\",\n              strokeWidth: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: \"5\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              fontSize: \"14\",\n              fontWeight: \"bold\",\n              children: \"Switch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"0\",\n              y: NODE_SIZE / 2 + 15,\n              textAnchor: \"middle\",\n              fill: \"black\",\n              fontSize: \"10\",\n              children: selectedSwitch.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Server, {\n              x: \"-12\",\n              y: \"-30\",\n              size: 24,\n              color: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), uniqueConnectedPcs.map((pc, index) => {\n            // Iterate over unique PCs\n            const angle = index * angleStepUniquePc; // Use index of unique PC for position\n            const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n            const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n            // Find a connection involving this PC to get overall status for display\n            const associatedConnection = fullConnectionPaths.find(path => {\n              var _path$pc;\n              return ((_path$pc = path.pc) === null || _path$pc === void 0 ? void 0 : _path$pc.id) === pc.id;\n            });\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              // Key by unique PC ID\n              transform: `translate(${pcX}, ${pcY})`,\n              onMouseEnter: e => handleNodeMouseEnter(\"PC\", pc, pcX, pcY, e),\n              onMouseLeave: handleNodeMouseLeave,\n              className: \"cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"0\",\n                cy: \"0\",\n                r: NODE_SIZE / 2,\n                fill: \"#6366F1\",\n                stroke: \"#4F46E5\",\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: \"5\",\n                textAnchor: \"middle\",\n                fill: \"white\",\n                fontSize: \"12\",\n                fontWeight: \"bold\",\n                children: \"PC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: NODE_SIZE / 2 + 15,\n                textAnchor: \"middle\",\n                fill: \"black\",\n                fontSize: \"9\",\n                children: (pc === null || pc === void 0 ? void 0 : pc.name) || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Laptop, {\n                x: \"-10\",\n                y: \"-25\",\n                size: 20,\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                transform: \"translate(15, -15)\",\n                children: associatedConnection !== null && associatedConnection !== void 0 && associatedConnection.is_switch_port_up ? /*#__PURE__*/_jsxDEV(Wifi, {\n                  size: 16,\n                  color: \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                  size: 16,\n                  color: \"red\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, this)]\n            }, `pc-node-${pc.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this);\n          }), (() => {\n            // Using an IIFE to define and immediately execute logic within JSX\n            const uniquePPHops = new Map(); // Map to store unique PP nodes by ID\n            fullConnectionPaths.forEach(path => {\n              path.hops.forEach((hop, hopIndex) => {\n                if (hop.patch_panel && !uniquePPHops.has(hop.patch_panel.id)) {\n                  // Find the position for this unique PP node\n                  // This positioning is tricky, we'll place it at the *first* encountered segment position.\n                  const angle = fullConnectionPaths.findIndex(p => p.connectionId === path.connectionId) * angleStepUniquePc;\n                  const pcNodeCoord = {\n                    x: CENTER_X + PC_RADIUS * Math.cos(angle),\n                    y: CENTER_Y + PC_RADIUS * Math.sin(angle)\n                  };\n                  const switchNodeCoord = {\n                    x: CENTER_X,\n                    y: CENTER_Y\n                  };\n                  const segmentPercentage = (hopIndex + 0.5) / (path.hops.length + 1); // Mid-segment\n                  const hopCoords = getPointOnLine(pcNodeCoord, switchNodeCoord, segmentPercentage);\n                  uniquePPHops.set(hop.patch_panel.id, {\n                    data: hop.patch_panel,\n                    coords: hopCoords,\n                    port_status: hop.is_port_up // Use status of first instance, or average later\n                  });\n                }\n              });\n            });\n            return Array.from(uniquePPHops.values()).map(uniquePpNode => /*#__PURE__*/_jsxDEV(\"g\", {\n              transform: `translate(${uniquePpNode.coords.x}, ${uniquePpNode.coords.y})`,\n              onMouseEnter: e => handleNodeMouseEnter(\"PP\", uniquePpNode.data, uniquePpNode.coords.x, uniquePpNode.coords.y, e),\n              onMouseLeave: handleNodeMouseLeave,\n              className: \"cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: \"0\",\n                cy: \"0\",\n                r: HOP_NODE_SIZE / 2,\n                fill: \"#60A5FA\",\n                stroke: \"#3B82F6\",\n                strokeWidth: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: \"5\",\n                textAnchor: \"middle\",\n                fill: \"white\",\n                fontSize: \"8\",\n                fontWeight: \"bold\",\n                children: \"PP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: \"0\",\n                y: HOP_NODE_SIZE / 2 + 8,\n                textAnchor: \"middle\",\n                fill: \"black\",\n                fontSize: \"7\",\n                children: uniquePpNode.data.name || `PP ${uniquePpNode.data.id}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                transform: \"translate(10, -10)\",\n                children: uniquePpNode.port_status ? /*#__PURE__*/_jsxDEV(Wifi, {\n                  size: 10,\n                  color: \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(WifiOff, {\n                  size: 10,\n                  color: \"red\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 19\n              }, this)]\n            }, `unique-pp-node-${uniquePpNode.data.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this));\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), fullConnectionPaths.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"absolute text-xl text-gray-600\",\n          children: \"No PCs found connected to this switch.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this), hoveredNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"fixed\",\n            left: hoveredNode.x + 15,\n            top: hoveredNode.y + 15,\n            zIndex: 100\n          },\n          className: \"bg-gray-800 text-white text-xs p-2 rounded-md shadow-lg pointer-events-none whitespace-nowrap opacity-90 animate-fade-in-down\",\n          children: [hoveredNode.type === \"Switch\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Switch:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"IP: \", hoveredNode.data.ip_address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", hoveredNode.data.location_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Model: \", hoveredNode.data.model || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Ports: \", hoveredNode.data.total_ports]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), hoveredNode.type === \"PC\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"PC:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"IP: \", hoveredNode.data.ip_address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"OS: \", hoveredNode.data.operating_system || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Office: \", hoveredNode.data.office || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Username: \", hoveredNode.data.username || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"In Domain: \", hoveredNode.data.in_domain ? \"Yes\" : \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), hoveredNode.type === \"PP\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Patch Panel:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 21\n              }, this), \" \", hoveredNode.data.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", hoveredNode.data.location_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Rack: \", hoveredNode.data.rack_name || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Ports: \", hoveredNode.data.total_ports]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Plug, {\n            size: 16,\n            className: \"text-green-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), \" Port Up (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(WifiOff, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), \" Port Down (Overall Connection)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Server, {\n            size: 16,\n            className: \"text-red-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), \" Switch\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Laptop, {\n            size: 16,\n            className: \"text-indigo-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), \" PC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Split, {\n            size: 16,\n            className: \"text-blue-500 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), \" Patch Panel\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center ml-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"black\",\n              strokeWidth: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line to Switch/PC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"20\",\n            height: \"10\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"0\",\n              y1: \"5\",\n              x2: \"20\",\n              y2: \"5\",\n              stroke: \"gray\",\n              strokeWidth: \"2\",\n              strokeDasharray: \"5 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-1\",\n            children: \"Line between Hops\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(SwitchDiagramModal, \"7VsnSKAOhhE/SfM8No2iMpu0GrA=\");\n_c = SwitchDiagramModal;\nexport default SwitchDiagramModal;\nvar _c;\n$RefreshReg$(_c, \"SwitchDiagramModal\");","map":{"version":3,"names":["React","useState","XCircle","Server","Laptop","Plug","Wifi","WifiOff","Network","Split","jsxDEV","_jsxDEV","Fragment","_Fragment","SwitchDiagramModal","isOpen","onClose","selectedSwitch","connections","pcs","_s","hoveredNode","setHoveredNode","relevantConnections","filter","conn","switch_id","id","pc","uniqueConnectedPcs","seenPcIds","Set","fullConnectionPaths","forEach","path","has","push","add","map","connectedPc","find","pc_id","connectionId","hops","switch","switch_port","is_switch_port_up","SVG_WIDTH","SVG_HEIGHT","CENTER_X","CENTER_Y","PC_RADIUS","NODE_SIZE","HOP_NODE_SIZE","numPaths","length","numUniquePcs","angleStepUniquePc","Math","PI","getPointOnLine","p1","p2","percentage","x","y","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","title","width","height","viewBox","pathIndex","angle","pcX","cos","pcY","sin","pcNodeCoord","switchNodeCoord","pathElements","type","data","coords","hop","hopIndex","hopCoords","patch_panel","port_status","is_port_up","node","i","prevNode","strokeColor","strokeDash","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","transform","onMouseEnter","e","handleNodeMouseEnter","onMouseLeave","handleNodeMouseLeave","cx","cy","r","fill","textAnchor","fontSize","fontWeight","color","index","associatedConnection","_path$pc","uniquePPHops","Map","findIndex","p","segmentPercentage","set","Array","from","values","uniquePpNode","style","position","left","top","zIndex","ip_address","location_name","model","total_ports","operating_system","office","username","in_domain","rack_name","_c","$RefreshReg$"],"sources":["/app/src/components/SwitchDiagramModal.js"],"sourcesContent":["// frontend/src/components/SwitchDiagramModal.js\n// This component displays a modal with a diagram of a selected switch\n// in the center and all connected PCs (direct or via patch panels) around it,\n// showing intermediate patch panel hops as distinct nodes with detailed tooltips on hover.\n\nimport React, { useState } from \"react\";\nimport {\n  XCircle,\n  Server,\n  Laptop,\n  Plug,\n  Wifi,\n  WifiOff,\n  Network,\n  Split,\n} from \"lucide-react\";\n\nfunction SwitchDiagramModal({\n  isOpen,\n  onClose,\n  selectedSwitch,\n  connections,\n  pcs,\n}) {\n  // State for managing the tooltip - MUST be called unconditionally at the top level\n  const [hoveredNode, setHoveredNode] = useState(null);\n\n  if (!isOpen || !selectedSwitch) return null;\n\n  // Filter connections that involve the selected switch as the final destination\n  const relevantConnections = connections.filter(\n    (conn) => conn.switch_id === selectedSwitch.id && conn.pc\n  );\n\n  // Collect unique PCs that are connected to this switch to render unique PC nodes.\n  // Use a Set to track PC IDs already added, to ensure each PC node is rendered only once\n  // even if it has multiple connections to the same switch.\n  const uniqueConnectedPcs = [];\n  const seenPcIds = new Set();\n\n  fullConnectionPaths.forEach((path) => {\n    if (path.pc && !seenPcIds.has(path.pc.id)) {\n      uniqueConnectedPcs.push(path.pc);\n      seenPcIds.add(path.pc.id);\n    }\n  });\n\n  // Map relevant connections to include full PC and Switch objects\n  const fullConnectionPaths = relevantConnections.map((conn) => {\n    const connectedPc = pcs.find((pc) => pc.id === conn.pc_id);\n    return {\n      connectionId: conn.id, // This is already unique per connection\n      pc: connectedPc,\n      hops: conn.hops,\n      switch: selectedSwitch,\n      switch_port: conn.switch_port,\n      is_switch_port_up: conn.is_switch_port_up,\n    };\n  });\n\n  // Diagram dimensions and positioning\n  const SVG_WIDTH = 900;\n  const SVG_HEIGHT = 700;\n  const CENTER_X = SVG_WIDTH / 2;\n  const CENTER_Y = SVG_HEIGHT / 2;\n  const PC_RADIUS = 280;\n  const NODE_SIZE = 50;\n  const HOP_NODE_SIZE = 30;\n\n  const numPaths = fullConnectionPaths.length; // Number of distinct connections\n  const numUniquePcs = uniqueConnectedPcs.length; // Number of unique PCs to display\n  // Angle distribution for PCs around the circle - now based on unique PCs\n  const angleStepUniquePc = numUniquePcs > 0 ? (2 * Math.PI) / numUniquePcs : 0;\n\n  // Function to calculate a point along a line given a percentage\n  const getPointOnLine = (p1, p2, percentage) => {\n    return {\n      x: p1.x + (p2.x - p1.x) * percentage,\n      y: p1.y + (p2.y - p1.y) * percentage,\n    };\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[95vh] overflow-hidden transform transition-all duration-300 scale-100 opacity-100 flex flex-col\">\n        {/* Modal Header */}\n        <div className=\"flex justify-between items-center p-4 border-b border-gray-200 bg-gray-50\">\n          <h2 className=\"text-xl font-bold text-gray-800 flex items-center\">\n            <Network size={24} className=\"mr-2\" /> Network Diagram:{\" \"}\n            {selectedSwitch.name}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors duration-200\"\n            title=\"Close Diagram\"\n          >\n            <XCircle size={24} />\n          </button>\n        </div>\n\n        {/* Diagram Area */}\n        <div className=\"relative flex-grow flex items-center justify-center p-4 bg-gray-50\">\n          <svg\n            width=\"100%\"\n            height=\"100%\"\n            viewBox={`0 0 ${SVG_WIDTH} ${SVG_HEIGHT}`}\n          >\n            {/* Draw connections, including hops */}\n            {fullConnectionPaths.map((path, pathIndex) => {\n              // Instead of distributing all connections, we need to map unique PCs\n              // For now, keep the pathIndex for drawing multiple distinct lines\n              // A more advanced solution would draw a line between unique PC and PP/Switch nodes\n              // For now, the PC position is still based on `pathIndex`\n\n              const angle = pathIndex * angleStepUniquePc; // Use pathIndex for unique position for each connection path\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              const pcNodeCoord = { x: pcX, y: pcY };\n              const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n\n              const pathElements = [];\n              pathElements.push({\n                type: \"PC\",\n                data: path.pc,\n                coords: pcNodeCoord,\n              });\n\n              path.hops.forEach((hop, hopIndex) => {\n                const percentage = (hopIndex + 1) / (path.hops.length + 1);\n                const hopCoords = getPointOnLine(\n                  pcNodeCoord,\n                  switchNodeCoord,\n                  percentage\n                );\n                pathElements.push({\n                  type: \"PP\",\n                  data: hop.patch_panel,\n                  coords: hopCoords,\n                  port_status: hop.is_port_up,\n                });\n              });\n\n              pathElements.push({\n                type: \"Switch\",\n                data: path.switch,\n                coords: switchNodeCoord,\n              });\n\n              return (\n                <g key={`full-path-${path.connectionId}`}>\n                  {\" \"}\n                  {/* Key by unique connection ID */}\n                  {/* Draw lines between all elements in the path */}\n                  {pathElements.map((node, i) => {\n                    if (i === 0) return null;\n\n                    const prevNode = pathElements[i - 1];\n                    const strokeColor =\n                      node.type === \"Switch\" || prevNode.type === \"PP\"\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\"\n                        : prevNode.type === \"PC\" && path.hops.length === 0\n                        ? path.is_switch_port_up\n                          ? \"green\"\n                          : \"red\"\n                        : \"gray\";\n\n                    const strokeDash =\n                      (prevNode.type === \"PC\" && path.hops.length > 0) ||\n                      node.type === \"PP\"\n                        ? \"5 5\"\n                        : \"0\";\n\n                    return (\n                      <line\n                        key={`line-${path.connectionId}-${i}`} // Key by connection ID + segment index\n                        x1={prevNode.coords.x}\n                        y1={prevNode.coords.y}\n                        x2={node.coords.x}\n                        y2={node.coords.y}\n                        stroke={strokeColor}\n                        strokeWidth=\"2\"\n                        strokeDasharray={strokeDash}\n                      />\n                    );\n                  })}\n                </g>\n              );\n            })}\n\n            {/* Central Switch Node */}\n            <g\n              transform={`translate(${CENTER_X}, ${CENTER_Y})`}\n              onMouseEnter={(e) =>\n                handleNodeMouseEnter(\n                  \"Switch\",\n                  selectedSwitch,\n                  CENTER_X,\n                  CENTER_Y,\n                  e\n                )\n              }\n              onMouseLeave={handleNodeMouseLeave}\n              className=\"cursor-pointer\"\n            >\n              <circle\n                cx=\"0\"\n                cy=\"0\"\n                r={NODE_SIZE / 2}\n                fill=\"#EF4444\"\n                stroke=\"#B91C1C\"\n                strokeWidth=\"3\"\n              />\n              <text\n                x=\"0\"\n                y=\"5\"\n                textAnchor=\"middle\"\n                fill=\"white\"\n                fontSize=\"14\"\n                fontWeight=\"bold\"\n              >\n                Switch\n              </text>\n              <text\n                x=\"0\"\n                y={NODE_SIZE / 2 + 15}\n                textAnchor=\"middle\"\n                fill=\"black\"\n                fontSize=\"10\"\n              >\n                {selectedSwitch.name}\n              </text>\n              <Server x=\"-12\" y=\"-30\" size={24} color=\"white\" />\n            </g>\n\n            {/* Connected PC Nodes - Render only UNIQUE PCs */}\n            {uniqueConnectedPcs.map((pc, index) => {\n              // Iterate over unique PCs\n              const angle = index * angleStepUniquePc; // Use index of unique PC for position\n              const pcX = CENTER_X + PC_RADIUS * Math.cos(angle);\n              const pcY = CENTER_Y + PC_RADIUS * Math.sin(angle);\n\n              // Find a connection involving this PC to get overall status for display\n              const associatedConnection = fullConnectionPaths.find(\n                (path) => path.pc?.id === pc.id\n              );\n\n              return (\n                <g\n                  key={`pc-node-${pc.id}`} // Key by unique PC ID\n                  transform={`translate(${pcX}, ${pcY})`}\n                  onMouseEnter={(e) =>\n                    handleNodeMouseEnter(\"PC\", pc, pcX, pcY, e)\n                  }\n                  onMouseLeave={handleNodeMouseLeave}\n                  className=\"cursor-pointer\"\n                >\n                  <circle\n                    cx=\"0\"\n                    cy=\"0\"\n                    r={NODE_SIZE / 2}\n                    fill=\"#6366F1\"\n                    stroke=\"#4F46E5\"\n                    strokeWidth=\"2\"\n                  />\n                  <text\n                    x=\"0\"\n                    y=\"5\"\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                  >\n                    PC\n                  </text>\n                  <text\n                    x=\"0\"\n                    y={NODE_SIZE / 2 + 15}\n                    textAnchor=\"middle\"\n                    fill=\"black\"\n                    fontSize=\"9\"\n                  >\n                    {pc?.name || \"N/A\"}\n                  </text>\n                  <Laptop x=\"-10\" y=\"-25\" size={20} color=\"white\" />\n                  {/* Connection Status Icon (using status from first associated connection found) */}\n                  <g transform=\"translate(15, -15)\">\n                    {associatedConnection?.is_switch_port_up ? (\n                      <Wifi size={16} color=\"green\" />\n                    ) : (\n                      <WifiOff size={16} color=\"red\" />\n                    )}\n                  </g>\n                </g>\n              );\n            })}\n\n            {/* Patch Panel Nodes - Render unique PPs that appear as hops within the paths */}\n            {/* First, collect unique patch panels from all hops */}\n            {(() => {\n              // Using an IIFE to define and immediately execute logic within JSX\n              const uniquePPHops = new Map(); // Map to store unique PP nodes by ID\n              fullConnectionPaths.forEach((path) => {\n                path.hops.forEach((hop, hopIndex) => {\n                  if (\n                    hop.patch_panel &&\n                    !uniquePPHops.has(hop.patch_panel.id)\n                  ) {\n                    // Find the position for this unique PP node\n                    // This positioning is tricky, we'll place it at the *first* encountered segment position.\n                    const angle =\n                      fullConnectionPaths.findIndex(\n                        (p) => p.connectionId === path.connectionId\n                      ) * angleStepUniquePc;\n                    const pcNodeCoord = {\n                      x: CENTER_X + PC_RADIUS * Math.cos(angle),\n                      y: CENTER_Y + PC_RADIUS * Math.sin(angle),\n                    };\n                    const switchNodeCoord = { x: CENTER_X, y: CENTER_Y };\n                    const segmentPercentage =\n                      (hopIndex + 0.5) / (path.hops.length + 1); // Mid-segment\n                    const hopCoords = getPointOnLine(\n                      pcNodeCoord,\n                      switchNodeCoord,\n                      segmentPercentage\n                    );\n\n                    uniquePPHops.set(hop.patch_panel.id, {\n                      data: hop.patch_panel,\n                      coords: hopCoords,\n                      port_status: hop.is_port_up, // Use status of first instance, or average later\n                    });\n                  }\n                });\n              });\n\n              return Array.from(uniquePPHops.values()).map((uniquePpNode) => (\n                <g\n                  key={`unique-pp-node-${uniquePpNode.data.id}`}\n                  transform={`translate(${uniquePpNode.coords.x}, ${uniquePpNode.coords.y})`}\n                  onMouseEnter={(e) =>\n                    handleNodeMouseEnter(\n                      \"PP\",\n                      uniquePpNode.data,\n                      uniquePpNode.coords.x,\n                      uniquePpNode.coords.y,\n                      e\n                    )\n                  }\n                  onMouseLeave={handleNodeMouseLeave}\n                  className=\"cursor-pointer\"\n                >\n                  <circle\n                    cx=\"0\"\n                    cy=\"0\"\n                    r={HOP_NODE_SIZE / 2}\n                    fill=\"#60A5FA\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth=\"1\"\n                  />\n                  <text\n                    x=\"0\"\n                    y=\"5\"\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"8\"\n                    fontWeight=\"bold\"\n                  >\n                    PP\n                  </text>\n                  <text\n                    x=\"0\"\n                    y={HOP_NODE_SIZE / 2 + 8}\n                    textAnchor=\"middle\"\n                    fill=\"black\"\n                    fontSize=\"7\"\n                  >\n                    {uniquePpNode.data.name || `PP ${uniquePpNode.data.id}`}\n                  </text>\n                  {/* Port Status on Patch Panel (using status from first instance) */}\n                  <g transform=\"translate(10, -10)\">\n                    {uniquePpNode.port_status ? (\n                      <Wifi size={10} color=\"green\" />\n                    ) : (\n                      <WifiOff size={10} color=\"red\" />\n                    )}\n                  </g>\n                </g>\n              ));\n            })()}\n          </svg>\n          {fullConnectionPaths.length === 0 && (\n            <p className=\"absolute text-xl text-gray-600\">\n              No PCs found connected to this switch.\n            </p>\n          )}\n\n          {/* Floating Tooltip */}\n          {hoveredNode && (\n            <div\n              style={{\n                position: \"fixed\",\n                left: hoveredNode.x + 15,\n                top: hoveredNode.y + 15,\n                zIndex: 100,\n              }}\n              className=\"bg-gray-800 text-white text-xs p-2 rounded-md shadow-lg pointer-events-none whitespace-nowrap opacity-90 animate-fade-in-down\"\n            >\n              {hoveredNode.type === \"Switch\" && (\n                <>\n                  <p>\n                    <strong>Switch:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>IP: {hoveredNode.data.ip_address || \"N/A\"}</p>\n                  <p>Location: {hoveredNode.data.location_name || \"N/A\"}</p>\n                  <p>Model: {hoveredNode.data.model || \"N/A\"}</p>\n                  <p>Total Ports: {hoveredNode.data.total_ports}</p>\n                </>\n              )}\n              {hoveredNode.type === \"PC\" && (\n                <>\n                  <p>\n                    <strong>PC:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>IP: {hoveredNode.data.ip_address || \"N/A\"}</p>\n                  <p>OS: {hoveredNode.data.operating_system || \"N/A\"}</p>\n                  <p>Office: {hoveredNode.data.office || \"N/A\"}</p>\n                  <p>Username: {hoveredNode.data.username || \"N/A\"}</p>\n                  <p>In Domain: {hoveredNode.data.in_domain ? \"Yes\" : \"No\"}</p>\n                </>\n              )}\n              {hoveredNode.type === \"PP\" && (\n                <>\n                  <p>\n                    <strong>Patch Panel:</strong> {hoveredNode.data.name}\n                  </p>\n                  <p>Location: {hoveredNode.data.location_name || \"N/A\"}</p>\n                  <p>Rack: {hoveredNode.data.rack_name || \"N/A\"}</p>\n                  <p>Total Ports: {hoveredNode.data.total_ports}</p>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Footer for status legend */}\n        <div className=\"p-4 border-t border-gray-200 bg-gray-50 text-sm text-center flex justify-center gap-4 flex-wrap\">\n          <div className=\"flex items-center\">\n            <Plug size={16} className=\"text-green-500 mr-1\" /> Port Up (Overall\n            Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <WifiOff size={16} className=\"text-red-500 mr-1\" /> Port Down\n            (Overall Connection)\n          </div>\n          <div className=\"flex items-center\">\n            <Server size={16} className=\"text-red-500 mr-1\" /> Switch\n          </div>\n          <div className=\"flex items-center\">\n            <Laptop size={16} className=\"text-indigo-500 mr-1\" /> PC\n          </div>\n          <div className=\"flex items-center\">\n            <Split size={16} className=\"text-blue-500 mr-1\" /> Patch Panel\n          </div>\n          <div className=\"flex items-center ml-4\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"black\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line to Switch/PC</span>\n          </div>\n          <div className=\"flex items-center\">\n            <svg width=\"20\" height=\"10\">\n              <line\n                x1=\"0\"\n                y1=\"5\"\n                x2=\"20\"\n                y2=\"5\"\n                stroke=\"gray\"\n                strokeWidth=\"2\"\n                strokeDasharray=\"5 5\"\n              />\n            </svg>\n            <span className=\"ml-1\">Line between Hops</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SwitchDiagramModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}